/*! EnlighterJS Syntax Highlighter 3.2.0 | Mozilla Public License 2.0 | https://enlighterjs.org */
var EnlighterJS = (function (exports) {
    'use strict';

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2018 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    // global options storage
    var _options = {
      // default code indentation
      // @scope SETTINGS
      indent: 4,
      // &amp; to &
      // @scope SETTINGS
      ampersandCleanup: true,
      // enable line hover highlighting
      // @scope SETTINGS
      linehover: true,
      // show raw code on double click ?
      // @scope SETTINGS
      rawcodeDbclick: false,
      // text overflow behaviour: break/scroll
      // @scope SETTINGS
      textOverflow: 'break',
      // enable collapse / vertical scroll
      // @scope SETTINGS
      collapse: false,
      // copy css classes from origin element to outer wrapper
      // @scope SETTINGS
      retainCssClasses: false,
      // additional css classes added to outer wrapper
      // @scope SETTINGS
      cssClasses: '',
      // top outer toolbar
      toolbarOuter: '{BTN_TABS}',
      // header toolbar
      toolbarTop: '{BTN_RAW}{BTN_COPY}{BTN_WINDOW}{BTN_WEBSITE}',
      // footer toolbar
      toolbarBottom: '{BTN_COLLAPSE}',
      // show linenumbers
      // @scope SETTINGS,ATTRIBUTE
      linenumbers: true,
      // no line offset
      // @scope SETTINGS,ATTRIBUTE
      lineoffset: 0,
      // no special line highlighting
      // @scope SETTINGS,ATTRIBUTE
      highlight: '',
      // default layout
      // @scope SETTINGS,ATTRIBUTE
      layout: 'standard',
      // default language
      // @scope SETTINGS,ATTRIBUTE
      language: 'generic',
      // default theme
      // @scope SETTINGS,ATTRIBUTE
      theme: 'enlighter',
      // default title
      // @scope SETTINGS,ATTRIBUTE
      title: ''
    }; // set global enlighter options

    function setOptions(opt) {
      Object.assign(_options, opt || {});
    } // fetch all options

    function getOption(key) {
      return _options[key] || null;
    } // set a single options

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct(Parent, args, Class) {
          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) _setPrototypeOf(instance, Class.prototype);
          return instance;
        };
      }

      return _construct.apply(null, arguments);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (typeof call === "object" || typeof call === "function")) {
        return call;
      }

      return _assertThisInitialized(self);
    }

    function _createSuper(Derived) {
      return function () {
        var Super = _getPrototypeOf(Derived),
            result;

        if (_isNativeReflectConstruct()) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _superPropBase(object, property) {
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = _getPrototypeOf(object);
        if (object === null) break;
      }

      return object;
    }

    function _get(target, property, receiver) {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
      } else {
        _get = function _get(target, property, receiver) {
          var base = _superPropBase(target, property);

          if (!base) return;
          var desc = Object.getOwnPropertyDescriptor(base, property);

          if (desc.get) {
            return desc.get.call(receiver);
          }

          return desc.value;
        };
      }

      return _get(target, property, receiver || target);
    }

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }

    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

      return arr2;
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _createForOfIteratorHelper(o) {
      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {
          var i = 0;

          var F = function () {};

          return {
            s: F,
            n: function () {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function (e) {
              throw e;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var it,
          normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function () {
          it = o[Symbol.iterator]();
        },
        n: function () {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function (e) {
          didErr = true;
          err = e;
        },
        f: function () {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2018 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    // Commonly used Regular Expressions
    var _language_common_rules = {
      // single quoted strings: 'hello world'
      sqStrings: {
        regex: /('(?:[^'\\]|\\.)*')/g,
        type: 's0'
      },
      // double quoted strings: "hello world"
      dqStrings: {
        regex: /"(?:[^"\\]|\\.)*"/g,
        type: 's0'
      },
      // backtick quoted strings: `hello world`
      bqStrings: {
        regex: /`(?:[^`\\]|\\.)*`/g,
        type: 's0'
      },
      // chars in single quotes
      char: {
        regex: /('(\\.|.|\\\w+)')/g,
        type: 's1'
      },
      // slash style comments: // hello world
      slashComments: {
        regex: /(?:^|[^\\])\/\/.*$/gm,
        type: 'c0'
      },
      // pound comments: # hello world
      poundComments: {
        regex: /(?:^|[^\\])#.*$/gm,
        type: 'c0'
      },
      // block comments: (modern style) /* hello world */
      blockComments: {
        regex: /\/\*[\s\S]*?\*\//g,
        type: 'c1'
      },
      // doc comments: /** hello world */
      docComments: {
        regex: /\/\*\*[\s\S]*?\*\//g,
        type: 'c2'
      },
      // heredoc/nowdow
      heredoc: {
        regex: /(<<[<-]?\s*?(['"]?)([A-Z0-9_]+)\2\s*\n[\s\S]*?\n\3)/gi,
        type: 's5'
      },
      // common used brackets: () {} [] <>
      brackets: {
        regex: /[[\](){}<>]+/g,
        type: 'g1'
      },
      // floats: -12.412e-12
      floats: {
        regex: /[\b\W](-?((?:\d+\.\d+|\.\d+|\d+\.)(?:e[+-]?\d+)?)|\d+(?:e[+-]?\d+))/gi,
        type: 'n0'
      },
      // complex numbers/floats: -12.412e-12i
      complex: {
        regex: /[\b\W](?:-?(?:(?:\d+\.\d+|\.\d+|\d+\.|\d+)(?:e[+-]?\d+)?)|\d+(?:e[+-]?\d+))[ij]/gi,
        type: 'n5'
      },
      // integers (non word boundary!): -1234
      int: {
        regex: /[\b\W](-?\d+)(?!\.)\b/g,
        type: 'n1'
      },
      // hex numbers: 0x21F1A9
      hex: {
        regex: /[\b\W](-?0x[A-F0-9]+)\b/gi,
        type: 'n2'
      },
      // binary numbers: 0b10001001
      bin: {
        regex: /[\b\W](-?0b[01]+)\b/gi,
        type: 'n3'
      },
      // octal numbers: 07172
      octal: {
        regex: /[\b\W](-?0[0-7]+)(?!\.)\b/g,
        type: 'n4'
      },
      // properties
      prop: {
        regex: /[\w\])]\.(\w+)\b/g,
        type: 'm3'
      },
      // function calls
      fCalls: {
        regex: /\b([\w]+)\s*\(/gm,
        type: 'm0'
      },
      // method calls
      mCalls: {
        regex: /\.([\w]+)\s*\(/gm,
        type: 'm1'
      },
      // boolean expression
      boolean: {
        regex: /\b(true|false)\b/gi,
        type: 'e0'
      },
      // null expression
      null: {
        regex: /\b(null)\b/gi,
        type: 'e1'
      }
    };

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2018 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    // create token object
    function token(text, type, filter, index, priority) {
      return {
        text: text,
        type: type,
        index: index || 0,
        end: text.length + index,
        filter: filter || null,
        priority: priority || 0
      };
    }

    // ----------------------------------------------------------------------

    function getTokens(code, rules) {
      var defaultTokenType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'text';
      // token list
      var rawTokens = []; // iteration counter

      var iterationCounter = 0; // apply each rule to given sourcecode string

      for (var priority = 0; priority < rules.length; priority++) {
        // extract current rule
        var rule = rules[priority]; // valid rule ? otherwise skip it!

        if (!rule || !rule.type || !rule.regex) {
          return;
        }

        var match = void 0; // find ALL possible matches

        while ((match = rule.regex.exec(code)) != null) {
          // increment counter
          iterationCounter++; // throw an error on > 50k tokens - seems to be a infinite loop which may crash the browser!

          if (iterationCounter > 50000) {
            throw new Error('Infinite tokenizer loop detected; more than 50k tokens - language rule [' + priority + '] ' + rule.regex + ' seems to be broken');
          } // ignore empty matches


          if (match[0].length == 0) {
            continue;
          } // overrides the usual regex behaviour of not matching results that overlap
          // normally it should be only +1.
          // to optimize the matching performance, we skip thrid of the result length and start the new matching


          rule.regex.lastIndex = match.index + 1 + match[0].length / 3; // default type - first element

          var defaultType = Array.isArray(rule.type) ? rule.type[0] : rule.type; // default filter - first element

          var defaultFilter = (Array.isArray(rule.filter) ? rule.filter[0] : rule.filter) || null; // matching group used ?

          if (match.length > 1) {
            // process each matching group as single token
            for (var i = 1; i < match.length; i++) {
              // valid match ?
              if (match[i]) {
                // is array ? get nth type
                var type = Array.isArray(rule.type) && rule.type.length >= i ? rule.type[i - 1] : defaultType; // is array ? get nth type

                var filter = Array.isArray(rule.filter) && rule.filter.length >= i ? rule.filter[i - 1] : defaultFilter; // create new token

                rawTokens.push(token(match[i], type, filter, match.index + match[0].indexOf(match[i]), priority));
              }
            }
          } else {
            // use full pattern matching
            rawTokens.push(token(match[0], defaultType, defaultFilter, match.index, priority));
          }
        }
      } // sort tokens by index (first occurrence) AND priority


      rawTokens = rawTokens.sort(function (token1, token2) {
        // same position ? => use rule prioritisation
        if (token1.index == token2.index) {
          // priority comparison
          return token1.priority < token2.priority ? -1 : 1; // different position: first match wins
        } else {
          return token1.index < token2.index ? -1 : 1;
        }
      }); // cleaned token list to render

      var tokens = []; // last token position

      var lastTokenEnd = 0; // iterate over raw token list and retain the first match - drop overlaps

      for (var _i = 0; _i < rawTokens.length; _i++) {
        // unmatched text between tokens ?
        if (lastTokenEnd < rawTokens[_i].index) {
          // create new start text token
          tokens.push(token(code.substring(lastTokenEnd, rawTokens[_i].index), defaultTokenType, null, lastTokenEnd));
        } // token callback set ?


        if (rawTokens[_i].filter) {
          // process tokens
          var subTokens = rawTokens[_i].filter(rawTokens[_i]) || []; // append subtokens

          for (var j = 0; j < subTokens.length; j++) {
            tokens.push(subTokens[j]);
          } // default -> use token directly

        } else {
          // push current token to list
          tokens.push(rawTokens[_i]);
        } // store last token position


        lastTokenEnd = rawTokens[_i].end; // find next, non overlapping token

        var nextTokenFound = false;

        for (var _j = _i + 1; _j < rawTokens.length; _j++) {
          if (rawTokens[_j].index >= lastTokenEnd) {
            // the "current" token -> i will be incremented in the next loop => j-1
            _i = _j - 1;
            nextTokenFound = true;
            break;
          }
        } // final position reached ?


        if (nextTokenFound === false) {
          break;
        }
      } // text fragments complete ? or is the final one missing ?


      if (lastTokenEnd < code.length) {
        tokens.push(token(code.substring(lastTokenEnd), defaultTokenType, null, lastTokenEnd));
      }

      return tokens;
    }

    var generic = /*#__PURE__*/function () {
      function generic() {
        _classCallCheck(this, generic);

        // array of highlighting rules used by the tokenizer
        this.rules = []; // initialize language options

        this.setupLanguage();
      } // override this method to setup language params


      _createClass(generic, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings - single quoted
          _language_common_rules.sqStrings, // strings - double quoted
          _language_common_rules.dqStrings, // properties
          _language_common_rules.prop, // slash style comments
          _language_common_rules.slashComments, // # style comments
          _language_common_rules.poundComments, // multi line comments
          _language_common_rules.blockComments, // brackets () {} [] <>
          _language_common_rules.brackets, // common used keywords
          {
            regex: /\W(true|false|null|nil|if|then|else|for|while|do|class|implements|extends|function|end|void|return|in|of|new|this|try|catch|def|except)\W/gi,
            type: 'k1'
          }, // method calls
          _language_common_rules.mCalls, // function calls
          _language_common_rules.fCalls, // octals
          _language_common_rules.octal, // numbers (bin)
          _language_common_rules.bin, // numbers (hex)
          _language_common_rules.hex, // numbers (floats)
          _language_common_rules.floats, // numbers (int)
          _language_common_rules.int, // some symbols
          {
            regex: /[\b\s]([$&|~*:;]+)[\b\s]/g,
            type: 'g0'
          }];
        } // run the tokenizer by given rule-set
        // allows to override the default behaviour

      }, {
        key: "analyze",
        value: function analyze(sourcecode) {
          return getTokens(sourcecode, this.rules);
        }
      }]);

      return generic;
    }();

    // Author: [Andi Dittrich]
    // --

    var abap = /*#__PURE__*/function (_generic) {
      _inherits(abap, _generic);

      var _super = _createSuper(abap);

      function abap() {
        _classCallCheck(this, abap);

        return _super.apply(this, arguments);
      }

      _createClass(abap, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// single quoted strings
          _language_common_rules.sqStrings, // template strings
          {
            regex: /\|.*?\|/g,
            type: 's2'
          }, // quote style comments
          {
            regex: /(".*)$/gm,
            type: 'c0'
          }, // * style comments
          {
            regex: /^\s*(\*.*)$/gm,
            type: 'c0'
          }, // variable initialization
          {
            regex: /(data):?\s*(\w+)\s*/gi,
            type: ['k2', 'k7']
          }, // variable types
          {
            regex: /(type)\s+(\w+)\s*/gi,
            type: ['k2', 'k5']
          }, // boolean expressions
          {
            regex: /\b(abap_true|abap_false)\b/gi,
            type: 'e0'
          }, // undefined
          {
            regex: /\b(abap_undefined)\b/gi,
            type: 'e1'
          }, // keywords
          {
            regex: /\b[A-Z_][A-Za-z0-9_]*\b/g,
            type: 'k0'
          }, // functions calls
          _language_common_rules.fCalls, // integer numbers
          _language_common_rules.int, // common brackets
          _language_common_rules.brackets];
        }
      }]);

      return abap;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var assembly = /*#__PURE__*/function (_generic) {
      _inherits(assembly, _generic);

      var _super = _createSuper(assembly);

      function assembly() {
        _classCallCheck(this, assembly);

        return _super.apply(this, arguments);
      }

      _createClass(assembly, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// singleLineComments - comments start with a semicolon (only single line comments available)
          {
            regex: /(;.*)$/gm,
            type: 'co0'
          }, // controls - used e.g. in KEIL
          {
            regex: /(\$.*)$/gm,
            type: 'k4'
          }, // "strings" may used in some assemblers for char constants
          _language_common_rules.sqStrings, _language_common_rules.dqStrings, // general instructions (followed after a label or at a new line)
          {
            regex: /(^|:)\s*?(\w+)\s+/gm,
            type: 'k0'
          }, // labels (jump targets)
          {
            regex: /^\s*?([A-Z?_][A-Z0-9?_]+:)\s*?/gim,
            type: 'k6'
          }, // indirect addresses starts with @
          {
            regex: /@\w+/gi,
            type: 'k9'
          }, // immediate data
          {
            regex: /#\w+/gi,
            type: 'k9'
          }, // Hexadecimal (two notations): 0aH  (8051 asm)
          {
            regex: /[A-F0-9][A-F0-9$]+?H/gi,
            type: 'n2'
          }, // Decimal: \d+  (8051 asm)
          {
            regex: /\d[\d$]+?D/gi,
            type: 'n1'
          }, // Binary: 0b00001010, 0b11111111 (8051 asm)
          {
            regex: /[01][01$]+?B/gi,
            type: 'n3'
          }, // Octals: 1767q (8051 asm)
          {
            regex: /[0-7][0-7$]+?(?:Q|O)/gi,
            type: 'nu4'
          }, // Hexadecimal2 (two notations): 0x0a, $0a, 0xff, $ff (generic)
          {
            regex: /(0x[A-F0-9]+|\$[A-F0-9]+)/gi,
            type: 'n2'
          }, // Binary: 0b00001010, 0b11111111 (generic)
          {
            regex: /(0b[01]+)/g,
            type: 'n3'
          }, // Decimal: \d+ (generic)
          {
            regex: /\b(\d+)/g,
            type: 'n1'
          }, // e.g. LOW(), HIGH() ..
          _language_common_rules.fCalls];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['asm'];
        }
      }]);

      return assembly;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var avrassembly = /*#__PURE__*/function (_generic) {
      _inherits(avrassembly, _generic);

      var _super = _createSuper(avrassembly);

      function avrassembly() {
        _classCallCheck(this, avrassembly);

        return _super.apply(this, arguments);
      }

      _createClass(avrassembly, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// singleLineComments - comments start with a semicolon (only single line comments available)
          {
            regex: /(;.*)$/gm,
            type: 'co0'
          }, // "strings" may used in some assemblers for char constants
          _language_common_rules.sqStrings, _language_common_rules.dqStrings, // available directives: BYTE,CSEG,DB,DEF,DEVICE,DSEG,DW,ENDMACRO,EQU,ESEG,EXIT,INCLUDE,LIST,LISTMAC,MACRO,NOLIST,ORG,SET
          {
            regex: /^\s*?\.\w+\s+/gm,
            type: 'kw4'
          }, // register
          {
            regex: /\b(r\d{1,2})/gi,
            type: 'kw0'
          }, // macro parameter
          {
            regex: /(@[0-9])/gi,
            type: 'k2'
          }, // labels
          {
            regex: /^\s*?(\w+:)\s*?/gm,
            type: 'kw6'
          }, // instructions
          {
            regex: /(^|:)\s*?(\w+)\s+/gm,
            type: 'kw0'
          }, // Hexadecimal (two notations): 0x0a, $0a, 0xff, $ff
          {
            regex: /(0x[A-F0-9]+|\$[A-F0-9]+)/gi,
            type: 'nu2'
          }, // Binary Numbers
          _language_common_rules.bin, // Integers/Decimals
          _language_common_rules.int, // functions e.g. LOW(), HIGH() ..
          _language_common_rules.fCalls, // io register alias e.g. DDRA, PORTB, TIMSK
          {
            regex: /\b[A-Z]{2,}[0-9]?[0-9]?\b/g,
            type: 'kw9'
          }];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['avrasm'];
        }
      }]);

      return avrassembly;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var cpp = /*#__PURE__*/function (_generic) {
      _inherits(cpp, _generic);

      var _super = _createSuper(cpp);

      function cpp() {
        _classCallCheck(this, cpp);

        return _super.apply(this, arguments);
      }

      _createClass(cpp, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings
          _language_common_rules.dqStrings, // chars
          _language_common_rules.char, // annotations
          {
            regex: /@[\W\w_][\w]+/gm,
            type: 's9'
          }, // boolean expression
          _language_common_rules.boolean, // null expression
          _language_common_rules.null, // properties - render before keywords!
          _language_common_rules.prop, // directives
          {
            regex: /#.*$/gm,
            type: 'k4'
          }, // control keywords
          {
            regex: /\b(break|case|catch|continue|do|else|for|if|goto|switch|try|throw|while)\b/g,
            type: 'k1'
          }, // compile time constants constants
          {
            regex: /\b(__[A-Z][A-Z0-9_]+__|__cplusplus)\b/g,
            type: 'e3'
          }, // generic types like uint16_t
          {
            regex: /\b(\w+\d+?_t)\b/g,
            type: 'k5'
          }, // static types
          {
            regex: /\b(bool|char|double|float|int|long|short|void)\b/g,
            type: 'k5'
          }, // type initialization
          {
            regex: /\b(enum|struct|typedef|union)\b/g,
            type: 'k2'
          }, // qualifier/modifier
          {
            regex: /\b(const|volatile|unsigned|signed|restrict)\b/g,
            type: 'k8'
          }, // keywords
          {
            regex: /\b(asm|auto|class|auto|default|explicit|export|extern|friend|inline|thread_local|static_assert|nullptr|noexcept|friend|decltype|constexpr|alignof|alignas|virtual|using|typename|typeid|this|template|static|return|register|public|protected|private|operator|namespace|mutable|inline)\b/g,
            type: 'k0'
          }, // operator
          {
            regex: /\b(new|delete|cast|const_cast|dynamic_cast|static_cast|reinterpret_cast|sizeof|and|bitand|and_eq|not|not_eq|or|bitor|or_eq|xor|xor_eq|compl)\b/g,
            type: 'k3'
          }, // method calls
          _language_common_rules.mCalls, // global function calls
          _language_common_rules.fCalls, // slash style comments
          _language_common_rules.slashComments, // multi line comments
          _language_common_rules.blockComments, // octal
          _language_common_rules.octal, // bin
          _language_common_rules.bin, // hex
          _language_common_rules.hex, // floats numbers
          _language_common_rules.floats, // brackets
          _language_common_rules.brackets];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['c++', 'c'];
        }
      }]);

      return cpp;
    }(generic);

    // ----------------------------------------------------------------------

    function microTokenizer(token$1, regex, cb) {
      // list of sub-tokens to return
      var subTokens = []; // last token position

      var lastTokenEnd = 0; // the current match

      var match; // find ALL possible matches

      while ((match = regex.exec(token$1.text)) != null) {
        // unmatched text between tokens ?
        if (lastTokenEnd < match.index) {
          // create new start text token
          subTokens.push(token(token$1.text.substring(lastTokenEnd, match.index), token$1.type, null, lastTokenEnd));
        } // process current match


        var t = cb(match, token$1.type) || []; // add high-level processed tokens

        for (var i = 0; i < t.length; i++) {
          subTokens.push(t[i]);
        } // next regex offset


        lastTokenEnd = match.index + match[0].length; // overrides the usual regex behaviour of not matching results that overlap

        regex.lastIndex = lastTokenEnd;
      } // subtokens created ? otherwise return original token


      if (subTokens.length == 0) {
        return [token$1];
      } else {
        // text fragments complete ? or is the final one missing ?
        if (lastTokenEnd < token$1.text.length) {
          subTokens.push(token(token$1.text.substring(lastTokenEnd), token$1.type, null, lastTokenEnd));
        }

        return subTokens;
      }
    }

    // Author: [Andi Dittrich]
    // --

    var csharp = /*#__PURE__*/function (_generic) {
      _inherits(csharp, _generic);

      var _super = _createSuper(csharp);

      function csharp() {
        _classCallCheck(this, csharp);

        return _super.apply(this, arguments);
      }

      _createClass(csharp, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          // template strings. Stage-2 Analyzing
          function parseInterpolatedStrings(token$1) {
            // run the MicroTokenizer to identify the template tags
            return microTokenizer(token$1, /\{.*?}/g, function (match) {
              return [token(match[0], 's3')];
            });
          }

          this.rules = [// strings, chars
          {
            regex: /\$("(?:[^"\\]|\\.)*")/g,
            type: 's0',
            filter: parseInterpolatedStrings
          }, _language_common_rules.dqStrings, _language_common_rules.char, // boolean, null
          _language_common_rules.null, _language_common_rules.boolean, // properties
          _language_common_rules.prop, // types
          {
            regex: /\b(bool|byte|char|decimal|double|float|int|long|sbyte|short|uint|ulong|ushort|void)\b/g,
            type: 'k5'
          }, // control keywords
          {
            regex: /\b(while|try|throw|switch|if|goto|foreach|for|finally|else|do|continue|catch|case|break)\b/g,
            type: 'k1'
          }, // package directives
          {
            regex: /^((?:using|namespace)\s+)(\w[\w._]+[;{\n])/gm,
            type: ['k0', 'k10']
          }, // type initialization
          {
            regex: /\b(enum|struct|var)\b/g,
            type: 'k2'
          }, // qualifier/modifier
          {
            regex: /\b(const|in|out)\b/g,
            type: 'k8'
          }, // keywords
          {
            regex: /\b(using|volatile|virtual|using|unsafe|unchecked|static|stackalloc|sealed|return|ref|readonly|public|protected|private|params|override|operator|object|namespace|lock|is|internal|interface|implicit|fixed|extern|explicit|event|delegate|default|class|checked|base|as|abstract)\b/g,
            type: 'k0'
          }, // special inheritance
          {
            regex: /\b(this)\b/g,
            type: 'k9'
          }, // operator
          {
            regex: /\b(new|sizeof|typeof)\b/g,
            type: 'k3'
          }, // function/method calls
          _language_common_rules.fCalls, _language_common_rules.mCalls, // comments
          _language_common_rules.slashComments, _language_common_rules.blockComments, _language_common_rules.docComments, // numbers
          _language_common_rules.int, _language_common_rules.floats, _language_common_rules.bin, _language_common_rules.hex, _language_common_rules.octal, // brackets
          _language_common_rules.brackets];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['c#'];
        }
      }]);

      return csharp;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var css = /*#__PURE__*/function (_generic) {
      _inherits(css, _generic);

      var _super = _createSuper(css);

      function css() {
        _classCallCheck(this, css);

        return _super.apply(this, arguments);
      }

      _createClass(css, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings (e.g. fonts, images)
          _language_common_rules.dqStrings, _language_common_rules.sqStrings, // directives @media, @import
          {
            regex: /\W@(charset|import|namespace|page|font-face|keyframes|viewport|document|supports)\b/gi,
            type: 'k4'
          }, // url payload
          {
            regex: /(url\s*)(\(.*?\))/gi,
            type: ['m0', 's0']
          }, // hex colors
          {
            regex: /(#[a-z0-9]+)\W/gi,
            type: 'x14'
          }, // units
          {
            regex: /\b(\d+[.\d+-]?\s*(%|[a-z]{1,3})?)/gi,
            type: 'x13'
          }, // pseudo elements + selectors
          {
            regex: /[\w\]](::?[\w-]+)\b/g,
            type: 'x15'
          }, // id selector
          {
            regex: /(#[\w-]+)\W/g,
            type: 'x10'
          }, // class selector
          {
            regex: /(\.[\w-]+)\W/g,
            type: 'x11'
          }, // rule/property
          {
            regex: /([\w-]+)\s*:/g,
            type: 'x12'
          }, // multi line comments
          _language_common_rules.blockComments, _language_common_rules.brackets];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['styles'];
        }
      }]);

      return css;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var python = /*#__PURE__*/function (_generic) {
      _inherits(python, _generic);

      var _super = _createSuper(python);

      function python() {
        _classCallCheck(this, python);

        return _super.apply(this, arguments);
      }

      _createClass(python, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// multi line comment strings
          {
            regex: /^("""[\s\S]*?"""|'''[\s\S]*?''')/gm,
            type: 'c9'
          }, // multi line strings
          {
            regex: /("""[\s\S]*?"""|'''[\s\S]*?''')/g,
            type: 's5'
          }, // strings
          _language_common_rules.dqStrings, _language_common_rules.sqStrings, // class attributes
          {
            regex: /\b(__[a-z]+__)\b/g,
            type: 'e3'
          }, // namespace
          {
            regex: /[^;]\s*(from\s+)([\w.]+)(\s+import)/gi,
            type: ['k0', 'k10', 'k0']
          }, // control keywords
          // https://github.com/python/cpython/blob/3.7/Lib/keyword.py
          {
            regex: /\b(raise|while|try|if|for|finally|else|elif|continue|break)\b/g,
            type: 'k1'
          }, // keywords
          {
            regex: /\b(yield|with|return|pass|lambda|is|in|import|global|from|except|def|class|assert|as|async|await)\b/g,
            type: 'k0'
          }, // operator
          {
            regex: /\b(and|or|not|del)\b/g,
            type: 'k3'
          }, // boolean
          {
            regex: /\b(True|False)\b/g,
            type: 'e0'
          }, // null
          {
            regex: /\b(None)\b/g,
            type: 'e1'
          }, // method calls
          _language_common_rules.mCalls, // global function calls
          _language_common_rules.fCalls, // comments
          _language_common_rules.poundComments, // numbers
          _language_common_rules.int, _language_common_rules.hex, _language_common_rules.floats, _language_common_rules.octal, // brackets
          _language_common_rules.brackets];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['py'];
        }
      }]);

      return python;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var cython = /*#__PURE__*/function (_python) {
      _inherits(cython, _python);

      var _super = _createSuper(cython);

      function cython() {
        _classCallCheck(this, cython);

        return _super.apply(this, arguments);
      }

      _createClass(cython, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          // run python regex setup
          _get(_getPrototypeOf(cython.prototype), "setupLanguage", this).call(this); // local rule-set


          var addonRules = [// static types
          {
            regex: /\b(bool|char|double|float|int|long|short|void)\b/g,
            type: 'k5'
          }, // type initialization
          {
            regex: /\b(enum|struct|typedef|union|object)\b/g,
            type: 'k2'
          }, // qualifier/modifier
          {
            regex: /\b(const|volatile|unsigned|signed|restrict)\b/g,
            type: 'k8'
          }, // additional keywords
          {
            regex: /\b(readonly|extern|namespace|public|privat|include|cimport|pyximport|cythonize|cdef|cpdef|ctypedef|property|IF|ELIF|ELSE|DEF)\b/g,
            type: 'k0'
          }]; // merge rules (prepend)

          this.rules = addonRules.concat(this.rules);
        }
      }]);

      return cython;
    }(python);

    // Author: [Andi Dittrich]
    // --

    var cordpro = /*#__PURE__*/function (_generic) {
      _inherits(cordpro, _generic);

      var _super = _createSuper(cordpro);

      function cordpro() {
        _classCallCheck(this, cordpro);

        return _super.apply(this, arguments);
      }

      _createClass(cordpro, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// comments
          _language_common_rules.poundComments, // brackets
          _language_common_rules.brackets, // chords
          {
            regex: /\[(\w+)\]/gm,
            type: 'k9'
          }, // metadata key:value
          {
            regex: /\{([\w_-]+)\s*(?::\s*(.*?))?}/gm,
            type: ['k7', 's0']
          }];
        }
      }]);

      return cordpro;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var diff = /*#__PURE__*/function (_generic) {
      _inherits(diff, _generic);

      var _super = _createSuper(diff);

      function diff() {
        _classCallCheck(this, diff);

        return _super.apply(this, arguments);
      }

      _createClass(diff, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// comments
          {
            regex: /^([+-]{3}.*)$/gm,
            type: 'c0'
          }, // section
          {
            regex: /^(@@.*@@\s*)/gm,
            type: 't2'
          }, // new content
          {
            regex: /^(\+.*)/gm,
            type: 't5'
          }, // removed content
          {
            regex: /^(-.*)/gm,
            type: 't6'
          }];
        }
      }]);

      return diff;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var dockerfile = /*#__PURE__*/function (_generic) {
      _inherits(dockerfile, _generic);

      var _super = _createSuper(dockerfile);

      function dockerfile() {
        _classCallCheck(this, dockerfile);

        return _super.apply(this, arguments);
      }

      _createClass(dockerfile, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings
          _language_common_rules.dqStrings, // variables (usage)
          {
            regex: /\$\{\w+\}/gi,
            type: 'k7'
          }, // arguments
          {
            regex: /ARG\s+(\w+)(?:(=)(.*?)$)?/gim,
            type: ['k7', 'k3', 's0']
          }, // env vars (single)
          {
            regex: /ENV\s+(\w+)(?:(\s+|=)(.*?)$)?/gim,
            type: ['k7', 'k3', 's0']
          }, // directives
          {
            regex: /(?:^|[^\\])#\s*\w+=.*$/gm,
            type: 'k4'
          }, // comments
          _language_common_rules.poundComments, // instructions
          {
            regex: /^([a-z]+)\b/gmi,
            type: 'k0'
          }, // general keywords
          {
            regex: /\b(AS)\b/gi,
            type: 'k0'
          }, // multiline "sugar"
          {
            regex: /^\s+(&&)/gim,
            type: 'k3'
          }, // brackets
          _language_common_rules.brackets];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['docker'];
        }
      }]);

      return dockerfile;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var go = /*#__PURE__*/function (_generic) {
      _inherits(go, _generic);

      var _super = _createSuper(go);

      function go() {
        _classCallCheck(this, go);

        return _super.apply(this, arguments);
      }

      _createClass(go, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings
          _language_common_rules.dqStrings, _language_common_rules.bqStrings, // chars
          _language_common_rules.char, // boolean expression
          _language_common_rules.boolean, // null expression
          {
            regex: /\b(nil)\b/gi,
            type: 'e1'
          }, // properties - render before keywords!
          _language_common_rules.prop, // variable type/initializations
          {
            regex: /\b(var)\b/g,
            type: 'k2'
          }, // control keywords
          {
            regex: /\b(case|break|default|else|goto|switch|if|continue|for)\b/g,
            type: 'k1'
          }, // keywords
          {
            regex: /\b(func|interface|select|defer|go|map|chan|package|fallthrough|range|import|return)\b/g,
            type: 'k0'
          }, // special keywords
          {
            regex: /\b(iota)\b/g,
            type: 'k9'
          }, // static types
          {
            regex: /\b(bool|string|u?int(8|16|32|64)?|uintptr|byte|rune|float32|float64|complex64|complex128)\b/g,
            type: 'k5'
          }, // type initialization
          {
            regex: /\b(struct|type)\b/g,
            type: 'k2'
          }, // qualifier/modifier
          {
            regex: /\b(const)\b/g,
            type: 'k8'
          }, // method calls
          _language_common_rules.mCalls, // global function calls
          _language_common_rules.fCalls, // slash style comments
          _language_common_rules.slashComments, // multi line comments
          //_language_common_rules.blockComments,
          // octal - processed as int
          _language_common_rules.octal, // integers
          _language_common_rules.int, // complex numbers
          _language_common_rules.complex, // float numbers
          _language_common_rules.floats, // hex  - processed as int
          _language_common_rules.hex, // brackets
          _language_common_rules.brackets];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['golang'];
        }
      }]);

      return go;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var groovy = /*#__PURE__*/function (_generic) {
      _inherits(groovy, _generic);

      var _super = _createSuper(groovy);

      function groovy() {
        _classCallCheck(this, groovy);

        return _super.apply(this, arguments);
      }

      _createClass(groovy, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// multi line strings triple quoted
          {
            regex: /("""[\s\S]*?"""|'''[\s\S]*?''')/g,
            type: 's5'
          }, // strings, chars
          _language_common_rules.dqStrings, _language_common_rules.sqStrings, _language_common_rules.char, // comments
          _language_common_rules.slashComments, _language_common_rules.blockComments, _language_common_rules.docComments, // slashy strings
          {
            regex: /(\/(?:[^/\\]|\\.)*\/)/g,
            type: 's5'
          }, // properties
          _language_common_rules.prop, // types
          {
            regex: /\b(byte|char|short|int|long|float|double|String)\b/g,
            type: 'k5'
          }, // control keywords
          {
            regex: /\b(break|case|catch|continue|default|do|else|finally|for|goto|if|switch|throw|try|while)\b/g,
            type: 'k1'
          }, // package directives
          {
            regex: /^(package|import)(\s+[\w.]+)/gm,
            type: ['k0', 'k10']
          }, // type initialization
          {
            regex: /\b(const|enum|def)\b/g,
            type: 'k2'
          }, // keywords
          {
            regex: /\b(as|assert|class|extends|goto|implements|in|interface|return|thows|trait)\b/g,
            type: 'k0'
          }, // special inheritance
          {
            regex: /\b(this|super)\b/g,
            type: 'k9'
          }, // operator
          {
            regex: /\b(instanceof|new)\b/g,
            type: 'k3'
          }, // function/method calls
          _language_common_rules.fCalls, _language_common_rules.mCalls, // boolean, null
          _language_common_rules.null, _language_common_rules.boolean, // shebang line
          {
            regex: /^#.*/g,
            type: 'k9'
          }, // octal numbers: 07172 
          {
            regex: /[\b\W](-?0[0-7][0-7_]+[GLIDF]?)\b/gi,
            type: 'n4'
          }, // integers (non word boundary!): -1234
          {
            regex: /[\b\W](-?\d[\d_]*[GLIDF]?)(?!\.)\b/gi,
            type: 'n1'
          }, // hex numbers: 0x21F1A9
          {
            regex: /[\b\W](-?0x[A-F0-9][A-F0-9_]+[GLIDF]?)\b/gi,
            type: 'n2'
          }, // binary numbers: 0b10001001
          {
            regex: /[\b\W](-?0b[01][01_]+[GLIDF]?)\b/gi,
            type: 'n3'
          }, // floats: -12.412e-12
          {
            regex: /(-?((?:\d+\.\d+|\.\d+|\d+\.)(?:e[+-]?\d+)?)|\d+(?:e[+-]?\d+)?)/gi,
            type: 'n0'
          }, // brackets
          _language_common_rules.brackets];
        }
      }]);

      return groovy;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var ini = /*#__PURE__*/function (_generic) {
      _inherits(ini, _generic);

      var _super = _createSuper(ini);

      function ini() {
        _classCallCheck(this, ini);

        return _super.apply(this, arguments);
      }

      _createClass(ini, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings
          _language_common_rules.dqStrings, // semicolon style comments
          {
            regex: /(;.*)$/gm,
            type: 'c0'
          }, // pound style comments
          _language_common_rules.poundComments, // sections
          {
            regex: /^\s*?(\[.*])\s*?$/gm,
            type: 't2'
          }, // variable assignments/initialization
          {
            regex: /^(\s*?[a-z0-9._-]+\s*?)(=)/gim,
            type: ['k2', 'k3']
          }, // boolean expressions
          {
            regex: /\b(true|false|on|off|yes|no)\b/gim,
            type: 'e0'
          }, // octals
          _language_common_rules.octal, // bin
          _language_common_rules.bin, // hex
          _language_common_rules.hex, // floats/integer numbers
          _language_common_rules.floats, // common brackets
          _language_common_rules.brackets];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['conf', 'cnf'];
        }
      }]);

      return ini;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var java = /*#__PURE__*/function (_generic) {
      _inherits(java, _generic);

      var _super = _createSuper(java);

      function java() {
        _classCallCheck(this, java);

        return _super.apply(this, arguments);
      }

      _createClass(java, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings, chars
          _language_common_rules.dqStrings, _language_common_rules.char, // annotations
          {
            regex: /@[\W\w_][\w]+/gm,
            type: 's9'
          }, // properties
          _language_common_rules.prop, // types
          {
            regex: /\b(boolean|byte|char|short|int|long|float|double|String|void|Integer|Double|BigInt|Float|Boolean|Byte|Char|Long)\b/g,
            type: 'k5'
          }, // control keywords
          {
            regex: /\b(while|try|catch|case|else|throw|break|if|do|goto|switch|for|continue)\b/g,
            type: 'k1'
          }, // package directives
          {
            regex: /^(package|import)(\s+[\w.]+)/gm,
            type: ['k0', 'k10']
          }, // type initialization
          {
            regex: /\b(enum)\b/g,
            type: 'k2'
          }, // qualifier/modifier
          {
            regex: /\b(const)\b/g,
            type: 'k8'
          }, // keywords
          {
            regex: /\b(native|volatile|strictfp|finally|class|static|interface|final|extends|transient|return|throws|public|protected|implements|private|synchronized|default|assert|abstract)\b/g,
            type: 'k0'
          }, // special inheritance
          {
            regex: /\b(this|super)\b/g,
            type: 'k9'
          }, // operator
          {
            regex: /\b(instanceof|new)\b/g,
            type: 'k3'
          }, // function/method calls
          _language_common_rules.fCalls, _language_common_rules.mCalls, // boolean, null
          _language_common_rules.null, _language_common_rules.boolean, // comments
          _language_common_rules.slashComments, _language_common_rules.blockComments, _language_common_rules.docComments, // numbers
          _language_common_rules.int, _language_common_rules.floats, _language_common_rules.bin, _language_common_rules.hex, _language_common_rules.octal, // brackets
          _language_common_rules.brackets];
        }
      }]);

      return java;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var javascript = /*#__PURE__*/function (_generic) {
      _inherits(javascript, _generic);

      var _super = _createSuper(javascript);

      function javascript() {
        _classCallCheck(this, javascript);

        return _super.apply(this, arguments);
      }

      _createClass(javascript, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          // escape sequences within strings. Stage-2 Analyzing
          function parseEscapeSeq(token$1) {
            // run the MicroTokenizer to process escape sequences
            return microTokenizer(token$1, /\\(x[A-F0-9]{2}|u[A-F0-9]{4}|.)/gi, function (match) {
              // single escape sequence token
              return [token(match[0], 's4')];
            });
          } // template strings. Stage-2 Analyzing


          function parseTemplateSeq(token$1) {
            // run the MicroTokenizer to identify the template tags
            return microTokenizer(token$1, /\$\{.*?}/g, function (match) {
              return [token(match[0], 's3')];
            });
          }

          this.rules = [// strings
          {
            regex: _language_common_rules.sqStrings.regex,
            type: 's0',
            filter: parseEscapeSeq
          }, // strings
          {
            regex: _language_common_rules.dqStrings.regex,
            type: 's0',
            filter: parseEscapeSeq
          }, // template strings
          {
            regex: /`(?:[^`\\]|\\.)*`/g,
            type: 's2',
            filter: parseTemplateSeq
          }, // boolean expression
          _language_common_rules.boolean, // null expression
          _language_common_rules.null, // properties - render before keywords!
          _language_common_rules.prop, // variable type/initializations
          {
            regex: /\b(var|let|enum|const)\b/g,
            type: 'k2'
          }, // global object keywords
          {
            regex: /\b(document|window|console)\b/g,
            type: 'k9'
          }, // control keywords
          {
            regex: /\b(break|case|catch|continue|do|else|finally|for|if|switch|try|while|throw)\b/g,
            type: 'k1'
          }, // keywords
          {
            regex: /\b(as|async|class|constructor|debugger|default|export|extends|function|import|return|with|yield|implements|package|protected|static|interface|private|public|await|module)\b/g,
            type: 'k0'
          }, // special inheritance
          {
            regex: /\b(this|super)\b/g,
            type: 'k9'
          }, // operator
          {
            regex: /\b(instanceof|new|delete|typeof|void|in)\b/g,
            type: 'k3'
          }, // special operators
          {
            regex: /\W(=>)\W/g,
            type: 'k3'
          }, // slash style comments
          _language_common_rules.slashComments, // multi line comments
          _language_common_rules.blockComments, // regular expressions
          {
            regex: /\W(\/(?:[^/\\]|\\.)*\/\w*)/g,
            type: 'e2'
          }, // method calls
          _language_common_rules.mCalls, // global function calls
          _language_common_rules.fCalls, // brackets
          {
            regex: /\{|}|\(|\)|\[|]/g,
            type: 'g1'
          }, // octals
          {
            regex: /[\b\W](-?0o[0-7]+)(?!\.)\b/g,
            type: 'n4'
          }, // bin
          _language_common_rules.bin, // hex
          _language_common_rules.hex, // floats/integer numbers
          _language_common_rules.floats, // integers
          _language_common_rules.int];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['js'];
        }
      }]);

      return javascript;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var json = /*#__PURE__*/function (_generic) {
      _inherits(json, _generic);

      var _super = _createSuper(json);

      function json() {
        _classCallCheck(this, json);

        return _super.apply(this, arguments);
      }

      _createClass(json, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// variable type/initializations
          {
            regex: /"(?:[^"\\]|\\.)*"\s*:/g,
            type: 'k2'
          }, // strings
          _language_common_rules.dqStrings, // boolean expression
          _language_common_rules.boolean, // null expression
          _language_common_rules.null, // brackets
          {
            regex: /\{|}|\(|\)|\[|]/g,
            type: 'g1'
          }, // floats/integer numbers
          _language_common_rules.int, _language_common_rules.floats, // symbols
          {
            regex: /,|:/g,
            type: 'g0'
          }];
        }
      }]);

      return json;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var kotlin = /*#__PURE__*/function (_generic) {
      _inherits(kotlin, _generic);

      var _super = _createSuper(kotlin);

      function kotlin() {
        _classCallCheck(this, kotlin);

        return _super.apply(this, arguments);
      }

      _createClass(kotlin, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings, chars
          _language_common_rules.dqStrings, _language_common_rules.char, // multi line strings
          {
            regex: /"""[\s\S]*?"""/g,
            type: 's5'
          }, // properties
          _language_common_rules.prop, // types
          {
            regex: /\b(Double|Float|Long|Int|Short|Byte|Any|String|Array)\b/g,
            type: 'k5'
          }, // control keywords
          {
            regex: /\b(break|continue|do|else|for|if|throw|try|when|while|catch|finally)\b/g,
            type: 'k1'
          }, // package directives
          {
            regex: /^(package|import)(\s+[\w.]+)/gm,
            type: ['k0', 'k10']
          }, // type initialization
          {
            regex: /\b(enum|typealias|object|companion|val|var)\b/g,
            type: 'k2'
          }, // qualifier/modifier
          {
            regex: /\b(actual|abstract|annotation|companion|crossinline|data|expect|external|final|infix|inline|inner|internal|lateinit|noinline|open|operator|out|override|private|protected|public|reified|sealed|suspend|tailrec|vararg)\b/g,
            type: 'k8'
          }, // keywords
          {
            regex: /\b(as|class|fun|in|interface|is|return|by|constructor|delegate|dynamic|field|file|get|init|param|property|receiver|set|setparam|where|field|it)\b/g,
            type: 'k0'
          }, // special inheritance
          {
            regex: /\b(this|super)\b/g,
            type: 'k9'
          }, // operator
          {
            regex: /\b(instanceof|new)\b/g,
            type: 'k3'
          }, // labels
          {
            regex: /(@\w+|\w+@)/gm,
            type: 'k6'
          }, // function/method calls
          _language_common_rules.fCalls, _language_common_rules.mCalls, // boolean, null
          _language_common_rules.null, _language_common_rules.boolean, // comments
          _language_common_rules.slashComments, _language_common_rules.blockComments, // integers (non word boundary!): -1234
          {
            regex: /[\b\W](-?\d[\d_]*L?)(?!\.)\b/g,
            type: 'n1'
          }, _language_common_rules.floats, // hex numbers: 0x21F1A9
          {
            regex: /[\b\W](-?0x[A-F0-9][A-F0-9_]+)\b/gi,
            type: 'n2'
          }, // binary numbers: 0b10001001
          {
            regex: /[\b\W](-?0b[01][01_]+)\b/gi,
            type: 'n3'
          }, // brackets
          _language_common_rules.brackets];
        }
      }]);

      return kotlin;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var less = /*#__PURE__*/function (_css) {
      _inherits(less, _css);

      var _super = _createSuper(less);

      function less() {
        _classCallCheck(this, less);

        return _super.apply(this, arguments);
      }

      _createClass(less, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          // setup css
          _get(_getPrototypeOf(less.prototype), "setupLanguage", this).call(this); // addon rules


          var addonRules = [// single line comments
          _language_common_rules.slashComments, // functions
          {
            regex: /\b([\w][\w-]+)\s*\(/gm,
            type: 'm0'
          }, // variables
          {
            regex: /@[\w-]+\b/g,
            type: 'k7'
          }, // reference operator
          {
            regex: /&/gi,
            type: 'k3'
          }]; // push to css rule-set

          this.rules = this.rules.concat(addonRules);
        }
      }]);

      return less;
    }(css);

    // Author: [Andi Dittrich]
    // --

    var lua = /*#__PURE__*/function (_generic) {
      _inherits(lua, _generic);

      var _super = _createSuper(lua);

      function lua() {
        _classCallCheck(this, lua);

        return _super.apply(this, arguments);
      }

      _createClass(lua, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// special comments end (inline code enabled)
          {
            regex: /---\[\[[\s\S]*?(]])/g,
            type: 'c1'
          }, // multi line comments
          {
            regex: /--\[\[[\s\S]*?]]/g,
            type: 'c1'
          }, // single line comments
          {
            regex: /(--.*)$/gm,
            type: 'c0'
          }, // single and double quoted strings
          _language_common_rules.dqStrings, _language_common_rules.sqStrings, // multi line strings
          {
            regex: /(\[(=*)\[[\S\s]*?]\2])/g,
            type: 's5'
          }, // boolean expression
          {
            regex: /\b(true|false)\b/gi,
            type: 'e0'
          }, // null expression
          {
            regex: /\b(nil)\b/gi,
            type: 'e1'
          }, // variable type/initializations
          {
            regex: /\b(local)\b/g,
            type: 'k2'
          }, // control keywords
          {
            regex: /\b(break|do|else|elseif|end|for|if|repeat|then|until|while)\b/g,
            type: 'k1'
          }, // keywords
          {
            regex: /\b(function|return|and|in|or|not)\b/g,
            type: 'k0'
          }, // brackets
          _language_common_rules.brackets, // all numbers are floats (real precision)
          _language_common_rules.floats, // general method calls
          _language_common_rules.mCalls, // general function calls
          _language_common_rules.fCalls];
        }
      }]);

      return lua;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var markdown = /*#__PURE__*/function (_generic) {
      _inherits(markdown, _generic);

      var _super = _createSuper(markdown);

      function markdown() {
        _classCallCheck(this, markdown);

        return _super.apply(this, arguments);
      }

      _createClass(markdown, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// code block
          {
            regex: /[\r|\n](```[a-z_-]*[\r|\n][\S\s]+?```)/gi,
            type: 't8'
          }, // # header
          {
            regex: /^\s*#{1,6}.+$/gm,
            type: 't1'
          }, // underline-ish header style
          {
            regex: /(.+[\r|\n][=-]{3,})[\r|\n]/g,
            type: 't1'
          }, // code inline
          {
            regex: /`.+?`/g,
            type: 't8'
          }, // horizontal lines
          {
            regex: /^(?:\*|_|-){3,}$/gm,
            type: 't2'
          }, // formatting strong/italic
          {
            regex: /\W(\*\*|\*|~~|~|__|_)(.*?\1)\W/gm,
            type: 't4'
          }, // hyperlinks
          {
            regex: /!?\[.*?]\(.*?\)/g,
            type: 't3'
          }];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['md', 'gfm'];
        }
      }]);

      return markdown;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var matlab = /*#__PURE__*/function (_generic) {
      _inherits(matlab, _generic);

      var _super = _createSuper(matlab);

      function matlab() {
        _classCallCheck(this, matlab);

        return _super.apply(this, arguments);
      }

      _createClass(matlab, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// single line comments
          {
            regex: /%.*$/gm,
            type: 'c0'
          }, // block comments
          {
            regex: /%%.*$/gm,
            type: 'c1'
          }, // strings
          _language_common_rules.sqStrings, // strings
          _language_common_rules.dqStrings, // boolean
          _language_common_rules.boolean, // method calls
          _language_common_rules.mCalls, // properties - render before keywords!
          _language_common_rules.prop, // control keywords
          {
            regex: /\b(break|case|catch|continue|do|else|elseif|end|end_try_catch|endfor|endif|endmethods|endparfor|endproperties|endswitch|endwhile|for|if|switch|try|until|while)\b/gi,
            type: 'k1'
          }, // keywords: https://www.gnu.org/software/octave/doc/interpreter/Keywords.html
          {
            regex: /\b(__FILE__|__LINE__|classdef|end_unwind_protect|endclassdef|endenumeration|endevents|endfunctionenumeration|events|function|global|methods|otherwise|parfor|persistent|properties|return|static|unwind_protect|unwind_protect_cleanup)\b/gi,
            type: 'k0'
          }, // function handles
          {
            regex: /(@[\w]+)\s*/gm,
            type: 'k7'
          }, // function calls
          _language_common_rules.fCalls, // floats numbers
          _language_common_rules.floats, // brackets
          _language_common_rules.brackets];
        }
      }]);

      return matlab;
    }(generic);

    // Author: [Andi Dittrich; Jan T. Sott]
    // --

    var nsis = /*#__PURE__*/function (_generic) {
      _inherits(nsis, _generic);

      var _super = _createSuper(nsis);

      function nsis() {
        _classCallCheck(this, nsis);

        return _super.apply(this, arguments);
      }

      _createClass(nsis, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [_language_common_rules.dqStrings, _language_common_rules.sqStrings, _language_common_rules.bqStrings, // variable type/initializations
          {
            regex: /^\s*(Var(\s+\\GLOBAL)?)(\s+\w+)\b/g,
            type: ['k2', 'k7']
          }, // defines
          {
            regex: /\W(\$\{\w+})\W/g,
            type: 'k9'
          }, // variable usage
          {
            regex: /\W(\$\w+)\b/g,
            type: 'k7'
          }, // commands
          {
            regex: /^\s*([A-Z]\w+)\s+/gm,
            type: 'k0'
          }, // static constants
          {
            regex: /\b[A-Z][A-Z_]*[A-Z]\b/g,
            type: 'e3'
          }, // compiler flags
          {
            regex: /^\s*(!\w+)\s+/gm,
            type: 'k4'
          }, // labels (jump targets)
          {
            regex: /^\s*(\w+:)\s*$/gim,
            type: 'k6'
          }, // states
          {
            regex: /\b(admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user)\b/gi,
            type: 'k9'
          }, // comments
          _language_common_rules.blockComments, // pound + semicolon comment syntax
          {
            regex: /[#;].*?$/gm,
            type: 'c0'
          }, // numbers
          _language_common_rules.int, _language_common_rules.hex, _language_common_rules.octal, _language_common_rules.brackets];
        }
      }]);

      return nsis;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var php = /*#__PURE__*/function (_generic) {
      _inherits(php, _generic);

      var _super = _createSuper(php);

      function php() {
        _classCallCheck(this, php);

        return _super.apply(this, arguments);
      }

      _createClass(php, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings
          _language_common_rules.sqStrings, _language_common_rules.dqStrings, // heredoc / nowdoc
          _language_common_rules.heredoc, _language_common_rules.boolean, // null expression
          _language_common_rules.null, // inheritance
          {
            regex: /(self|parent|\$this)/gi,
            type: 'k9'
          }, // control keywords
          {
            regex: /\b(as|break|case|catch|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|finally|for|foreach|goto|if|switch|throw|try|while)\b/g,
            type: 'k1'
          }, // magic constants
          {
            regex: /\b__[A-Z][A-Z0-9_]+__\b/g,
            type: 'e3'
          }, // keywords
          // http://php.net/manual/en/reserved.keywords.php
          // http://php.net/manual/en/reserved.other-reserved-words.php
          {
            regex: /\b(__halt_compiler|abstract|array|callable|class|const|continue|declare|default|die|echo|empty|eval|exit|extends|final|function|global|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|print|private|protected|public|require|require_once|return|static|trait|use|var|yield)\b/g,
            type: 'k0'
          }, // operator
          {
            regex: /\b(and|or|xor|clone|new|unset)\b/g,
            type: 'k3'
          }, // reserved
          // http://php.net/manual/en/reserved.other-reserved-words.php
          {
            regex: /\b(int|float|bool|string|resource|object|mixed|numeric)\b/g,
            type: 'k5'
          }, // slash style comments
          _language_common_rules.slashComments, // multi line comments
          _language_common_rules.blockComments, // variables
          {
            regex: /\$[A-Z_][\w]*/gim,
            type: 'k7'
          }, // global function calls
          _language_common_rules.fCalls, // method call on instances
          {
            regex: /->([\w]+)/gim,
            type: 'm1'
          }, // static calls
          {
            regex: /::([\w]+)/gim,
            type: 'm2'
          }, // octal
          _language_common_rules.octal, // bin
          _language_common_rules.bin, // hex
          _language_common_rules.hex, // floats numbers
          _language_common_rules.floats, // brackets
          _language_common_rules.brackets];
        }
      }]);

      return php;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var powershell = /*#__PURE__*/function (_generic) {
      _inherits(powershell, _generic);

      var _super = _createSuper(powershell);

      function powershell() {
        _classCallCheck(this, powershell);

        return _super.apply(this, arguments);
      }

      _createClass(powershell, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          // template strings. Stage-2 Analyzing
          function parseTemplateSeq(token$1) {
            // run the MicroTokenizer to identify the template tags
            return microTokenizer(token$1, /\$(?:\w+|\(.*?\))/g, function (match) {
              return [token(match[0], 'k7')];
            });
          }

          this.rules = [// double quoted strings
          {
            regex: /"(?:[^"`]|`.)*"/g,
            type: 's2',
            filter: parseTemplateSeq
          }, // single quoted strings
          _language_common_rules.sqStrings, // double quoted here strings
          {
            regex: /@"[\S\s]*?\n\s*"@/g,
            type: 's5',
            filter: parseTemplateSeq
          }, // single quoted here strings
          {
            regex: /@'[\S\s]*?\n\s*'@/g,
            type: 's5'
          }, // control keywords
          {
            regex: /\b(Begin|Break|Catch|Continue|Else|Elseif|End|Finally|For|ForEach|If|Switch|Throw|Try|Until|While)\b/gi,
            type: 'k1'
          }, // keywords
          {
            regex: /\b(Data|Do|DynamicParam|Exit|Filter|From|Function|In|InlineScript|Hidden|Parallel|Param|Process|Return|Sequence|Trap|Workflow)\b/gi,
            type: 'k0'
          }, // commands
          {
            regex: /\b([A-Z]\w+(?:-\w+)+)\b/gi,
            type: 'm0'
          }, // multi line comments
          {
            regex: /<#[\S\s]+?#>/gi,
            type: 'c1'
          }, // single line comments
          _language_common_rules.poundComments, // variables
          {
            regex: /\$[A-Z_][\w]*/gim,
            type: 'k7'
          }, // method calls
          _language_common_rules.mCalls, // function calls
          _language_common_rules.fCalls, // integers
          _language_common_rules.int, // floats
          _language_common_rules.floats, // brackets
          _language_common_rules.brackets];
        }
      }]);

      return powershell;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var prolog = /*#__PURE__*/function (_generic) {
      _inherits(prolog, _generic);

      var _super = _createSuper(prolog);

      function prolog() {
        _classCallCheck(this, prolog);

        return _super.apply(this, arguments);
      }

      _createClass(prolog, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// single line comments
          {
            regex: /(%.*)$/gm,
            type: 'c0'
          }, // multiline comments
          _language_common_rules.blockComments, // single and double quoted strings
          _language_common_rules.dqStrings, _language_common_rules.sqStrings, // term head
          {
            regex: /^(\w+)(?:\(.*?\))?\s*(?::-|\.)/gm,
            type: 'k9'
          }, // boolean expression
          {
            regex: /\b(true|false|Yes|No|not|fail)\b/gi,
            type: 'e0'
          }, // control keywords
          {
            regex: /\b(catch|throw|repeat)\b/g,
            type: 'k1'
          }, // interactive mode
          {
            regex: /^(\?-)/g,
            type: 'k9'
          }, // operator
          {
            regex: /\b(is)\b/g,
            type: 'k3'
          }, // variables
          {
            regex: /[A-Z_][\w]*/g,
            type: 'k7'
          }, // brackets
          _language_common_rules.brackets, // numbers
          _language_common_rules.floats, _language_common_rules.int, // general function calls
          _language_common_rules.fCalls];
        }
      }]);

      return prolog;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var qml = /*#__PURE__*/function (_generic) {
      _inherits(qml, _generic);

      var _super = _createSuper(qml);

      function qml() {
        _classCallCheck(this, qml);

        return _super.apply(this, arguments);
      }

      _createClass(qml, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings
          _language_common_rules.dqStrings, // properties
          _language_common_rules.prop, // types - starting with uppercase char
          {
            regex: /\b([A-Z]\w+)\b/g,
            type: 'k5'
          }, // package directives
          {
            regex: /^(import)(\s+[\w.]+)/gm,
            type: ['k0', 'k5']
          }, // static types
          {
            regex: /\b(bool|char|double|float|int|long|short|void|string)\b/g,
            type: 'k5'
          }, // function/method calls
          _language_common_rules.mCalls, // boolean, null
          _language_common_rules.null, _language_common_rules.boolean, // comments
          _language_common_rules.slashComments, _language_common_rules.blockComments, // numbers
          _language_common_rules.int, _language_common_rules.floats, // brackets
          _language_common_rules.brackets];
        }
      }]);

      return qml;
    }(generic);

    var raw = /*#__PURE__*/function (_generic) {
      _inherits(raw, _generic);

      var _super = _createSuper(raw);

      function raw() {
        _classCallCheck(this, raw);

        return _super.apply(this, arguments);
      }

      _createClass(raw, [{
        key: "setupLanguage",
        // RAW Code - create just a single text token
        value: function setupLanguage() {
          this.rules = [// text pass-through
          {
            regex: /^(.*?)$/g,
            type: 'text'
          }];
        }
      }]);

      return raw;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var ruby = /*#__PURE__*/function (_generic) {
      _inherits(ruby, _generic);

      var _super = _createSuper(ruby);

      function ruby() {
        _classCallCheck(this, ruby);

        return _super.apply(this, arguments);
      }

      _createClass(ruby, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          // string, regex, template literals
          function processLiterals(token) {
            // is regex ?
            if (token.text.match(/^%r/)) {
              token.type = 'e2';
            } else if (token.text.match(/^%x/)) {
              token.type = 'e4';
            }

            return [token];
          }

          this.rules = [// strings
          _language_common_rules.dqStrings, _language_common_rules.sqStrings, // heredoc
          _language_common_rules.heredoc, // shell command expressions
          {
            regex: /(`(?:[^`\\]|\\.)*`)/g,
            type: 'e4'
          }, // boolean expression
          _language_common_rules.boolean, // null expression
          {
            regex: /\b(nil)\b/gi,
            type: 'e1'
          }, _language_common_rules.fCalls, // properties - render before keywords!
          _language_common_rules.prop, // class/instance variables
          {
            regex: /@{1,2}[A-Za-z_]\w*\W/g,
            type: 'k7'
          }, // symbols
          {
            regex: /[^:](:[\w]+)\b/g,
            type: 'k6'
          }, // pre-defined global variables
          {
            regex: /(\$[a-z0-9_-]+|\$.)\W/gi,
            type: 'k9'
          }, // control keywords
          {
            regex: /\b(begin|break|case|do|else|elsif|end|ensure|for|if|in|next|redo|rescue|retry|then|unless|until|when|while)\b/gi,
            type: 'k1'
          }, // compile time constants
          {
            regex: /\b((?:__)?[A-Z][A-Z0-9_]+)\b/g,
            type: 'e3'
          }, // keywords
          {
            regex: /\b(alias|class|defined\?|undef|def|module|return|self|super|yield)\W/gi,
            type: 'k0'
          }, // operator
          {
            regex: /\b(and|not|or)\b/gi,
            type: 'k3'
          }, _language_common_rules.poundComments, // embedded documentation
          {
            regex: /^=begin[\S\s]*?^=end/gim,
            type: 'c2'
          }, // general literals with non-alphanumeric delimiters
          {
            regex: /(%[iqrswx](\W)(?:[^\2\n\\]|\\.)*\2[iomx]*)/gim,
            type: 's2',
            filter: processLiterals
          }, // literals with asymmetric brackets <> [] {} ()
          {
            regex: /(%[iqrswx]?(\{(?:[^}\\]|\\.)*}|\[(?:[^}\\]|\\.)*]|\((?:[^)\\]|\\.)*\))[iomx]*)/gim,
            type: 's2',
            filter: processLiterals
          }, // slash-style regular expressions
          {
            regex: /\W(\/(?:[^/\\]|\\.)*\/\w*)\W/g,
            type: 'e2'
          }, // ascii char sequences
          {
            regex: /\W\?(?:\w|\\M|\\C)(?:-\w|-\\M|-\\C)*\b/g,
            type: 'n1'
          }, // integers
          {
            regex: /[\b\W](-?\d[\d_]+?)(?!\.)\b/g,
            type: 'n1'
          }, // hex
          {
            regex: /[\b\W](-?0x[A-F0-9][A-F0-9_]+)\b/gi,
            type: 'n2'
          }, // bin
          {
            regex: /[\b\W](-?0b[01][01_]+)\b/gi,
            type: 'n3'
          }, // float literals
          {
            regex: /[\b\W](-?[\d_]+(?:\.[\d_]+)?(?:e[+-]?\d+)?[ji]?)\b/gi,
            type: 'n0'
          }, // brackets
          _language_common_rules.brackets];
        }
      }]);

      return ruby;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var rust = /*#__PURE__*/function (_generic) {
      _inherits(rust, _generic);

      var _super = _createSuper(rust);

      function rust() {
        _classCallCheck(this, rust);

        return _super.apply(this, arguments);
      }

      _createClass(rust, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// chars
          _language_common_rules.char, // strings
          {
            regex: /r((#+)".*?"\2)/gm,
            type: 's0'
          }, // raw strings
          {
            regex: /("(?:\\.|\\\s*\n|\\s*\r\n|[^\\"])*")/g,
            type: 's0'
          }, // directives
          {
            regex: /^\s*#.*$/gm,
            type: 'k4'
          }, // method defs
          {
            regex: /fn\s+([\w]+)\s*(<\w+\s*>)?\(/gm,
            type: 'k0'
          }, // function defs
          {
            regex: /\b\.?([\w]+)\s*(\(|::)/gm,
            type: 'k1'
          }, // macro defs
          {
            regex: /\b([\w]+)!/gm,
            type: 'k9'
          }, // keywords
          {
            regex: /\bself\b/gi,
            type: 'k9'
          }, _language_common_rules.boolean, // control keywords
          {
            regex: /\b(while|loop|in|for|if|else|do|continue|break)\b/g,
            type: 'k1'
          }, // type initialization
          {
            regex: /\b(type|struct|let|enum)\b/g,
            type: 'k2'
          }, // qualifier/modifier
          {
            regex: /\b(const)\b/g,
            type: 'k8'
          }, // keywords
          {
            regex: /\b(yield|where|virtual|use|unsized|unsafe|trait|super|static|return|ref|pure|pub|proc|priv|override|offsetof|mut|move|mod|match|macro|impl|fn|final|extern|crate|box|become|as|alignof|abstract)\b/g,
            type: 'k0'
          }, // operator
          {
            regex: /\b(sizeof|typeof)\b/g,
            type: 'k3'
          }, // float literals
          {
            regex: /\b([0-9_]+\.?[0-9_]+?(e\+[0-9_]+)?)(?:f32|f64)?\b/gim,
            type: 'n0'
          }, // int literals
          {
            regex: /\b([0-9_]+|0o[0-9_]+|0x[A-F0-9_]+|0b[0-1_]+)(?:u8|i8|u16|i16|u32|i32|u64|i64|isize|usize)?\b/gim,
            type: 'n1'
          }, // comments
          _language_common_rules.slashComments, _language_common_rules.blockComments, // doc comments
          {
            regex: /(?:^|[^\\])\/\/[/!].*$/gm,
            type: 'c2'
          }, {
            regex: /\/\*[*!][\s\S]*?\*\//gm,
            type: 'c2'
          }, _language_common_rules.brackets, // operators
          {
            regex: /\W(&)\w/g,
            type: 'k3'
          }];
        }
      }]);

      return rust;
    }(generic);

    // Author: [Pascal Havé]
    // --

    var scala = /*#__PURE__*/function (_generic) {
      _inherits(scala, _generic);

      var _super = _createSuper(scala);

      function scala() {
        _classCallCheck(this, scala);

        return _super.apply(this, arguments);
      }

      _createClass(scala, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings, chars
          _language_common_rules.dqStrings, _language_common_rules.char, // string interpolation : s"hello ${world}"
          {
            regex: /s"(?:[^"\\]|\\.)*"/g,
            type: 's2'
          }, // backticks identifier
          {
            regex: /`(?:[^`\\]|\\.)*`/g,
            type: 'k7'
          }, // annotations
          {
            regex: /@[\W\w_][\w]+/g,
            type: 's9'
          },
          /*
                       // basic types
                      {
                          regex: /\b(Boolean|Byte|Int|Long|Float|Double|Char|String|Unit)\b/g,
                          type: 'k5'
                      },
          
          
                      // template types
                      {
                          regex: /\[\s*([-+]?[A-Z]\w*)\s*\]/g,
                          type: 'k5'
                      },
          */
          // types
          {
            regex: /\b([A-Z]\w*)\b/g,
            type: 'k5'
          }, // control keywords
          {
            regex: /\b(while|try|catch|else|throw|break|if|do|goto|switch|for|match)\b/g,
            type: 'k1'
          }, // package directives
          {
            regex: /(package|import)(\s+[\w.]+)/gm,
            type: ['k0', 'k10']
          }, // symbol keywords
          {
            regex: /[\b\w\s)](_|:|@|#|<-|←|<:|<%|=|=>|⇒|>:)[\b\w\s]/g,
            type: 'k3'
          }, // keywords
          {
            regex: /\b(abstract|class|case|extends|final|finally|forSome|implicit|lazy|object|override|private|protected|return|sealed|trait|with|yield)\b/g,
            type: 'k0'
          }, // def keyword
          {
            regex: /\b(def)\s+(\w+)\b/gm,
            type: ['k2', 'm0']
          }, // type keyword
          {
            regex: /\b(type)\s+(\w+)\b/gm,
            type: ['k2', 'k5']
          }, // val keyword
          {
            regex: /\b(val)\s+(\w+)\b/gm,
            type: ['k2', 'k7']
          }, // var keyword
          {
            regex: /\b(var)\s+(\w+)\b/gm,
            type: ['k2', 'k7']
          }, // special inheritance
          {
            regex: /\b(this|super)\b/g,
            type: 'k9'
          }, // operator
          {
            regex: /\b(new)\b/g,
            type: 'k3'
          }, _language_common_rules.mCalls, _language_common_rules.fCalls,
          /*
                      // function/method calls
                      {
                          regex: /\b([a-z][\w]*)\s*(?:\[(.*?)\])?\s*\(/gm,
                          type: 'm0'
                      },
                      {
                          regex: /\.\s*([a-z][\w]*)/gm,
                          type: 'm0'
                      },
                      {
                          regex: /\b[a-z]\w*\s+([a-z][\w]*)\b/gm,
                          type: 'm0'
                      },
          */
          // boolean values, null keywords
          _language_common_rules.null, _language_common_rules.boolean, // comments
          _language_common_rules.slashComments, _language_common_rules.blockComments, _language_common_rules.docComments, // numbers
          _language_common_rules.int, _language_common_rules.floats, _language_common_rules.bin, //_language_common_rules.hex,
          //_language_common_rules.octal,
          // brackets
          _language_common_rules.brackets];
        }
      }]);

      return scala;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var scss = /*#__PURE__*/function (_css) {
      _inherits(scss, _css);

      var _super = _createSuper(scss);

      function scss() {
        _classCallCheck(this, scss);

        return _super.apply(this, arguments);
      }

      _createClass(scss, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          // setup css
          _get(_getPrototypeOf(scss.prototype), "setupLanguage", this).call(this); // addon rules


          var addonRules = [// single line comments
          _language_common_rules.slashComments, // functions
          {
            regex: /\b([\w-]+)\s*\(/gm,
            type: 'm0'
          }, // variables
          {
            regex: /\$[\w-]+\b/g,
            type: 'k7'
          }, // conditionals
          {
            regex: /@[\w-]+\b/g,
            type: 'k9'
          }, // reference operator
          {
            regex: /&/gi,
            type: 'k3'
          }]; // push to css rule-set

          this.rules = this.rules.concat(addonRules);
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['sass'];
        }
      }]);

      return scss;
    }(css);

    // Author: [Andi Dittrich]
    // --

    var shell = /*#__PURE__*/function (_generic) {
      _inherits(shell, _generic);

      var _super = _createSuper(shell);

      function shell() {
        _classCallCheck(this, shell);

        return _super.apply(this, arguments);
      }

      _createClass(shell, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// shebang
          {
            regex: /(^#!.*?)\n/gi,
            type: 'k4'
          }, // comments
          _language_common_rules.poundComments, // strings, single escaped chars like \" can be used within bash scripts
          {
            regex: /[^\\]("(?:[^"\\]|\\.)*")/g,
            type: 's0'
          }, // back-tick command string
          {
            regex: /`.*?`/gm,
            type: 's2'
          }, // command wrapper
          {
            regex: /(\$)\(/gm,
            type: 's2'
          }, // arguments
          {
            regex: /(\$\d)\b/gim,
            type: 'k9'
          }, // variables
          {
            regex: /(\$\w+)\b/gim,
            type: 'k7'
          }, // variable assignment
          {
            regex: /^(\s*\w+)=/gm,
            type: 'k7'
          }, // cases/labels
          {
            regex: /^\s*\w+\)\s*$/gm,
            type: 'k6'
          }, // control keywords
          {
            regex: /\b(if|fi|then|elif|else|for|do|done|until|while|break|continue|case|esac|in|eq|ne|gt|lt|ge|le)\b/gi,
            type: 'k1'
          }, // general keywords
          {
            regex: /\b(return|function)\b/gi,
            type: 'k0'
          }, // functions
          {
            regex: /^\s*\w+\(\)\s*\{/gm,
            type: 'k0'
          }, // numbers
          _language_common_rules.int];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['bash', 'sh', 'zsh'];
        }
      }]);

      return shell;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var sql = /*#__PURE__*/function (_generic) {
      _inherits(sql, _generic);

      var _super = _createSuper(sql);

      function sql() {
        _classCallCheck(this, sql);

        return _super.apply(this, arguments);
      }

      _createClass(sql, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// general comments
          _language_common_rules.poundComments, _language_common_rules.blockComments, // -- style comments
          {
            regex: /--.*$/gm,
            type: 'c0'
          }, // null keywords
          _language_common_rules.null, // values
          _language_common_rules.sqStrings, // column name literals
          {
            regex: /`\w+?`(?:\.`\w+?`)*/g,
            type: 'k9'
          }, // operators
          {
            regex: /\b(all|and|any|between|exists|in|like|not|or|is null|is not null|unique|=|!=|<>|>|<|>=|<=|!<|!>)\b/gi,
            type: 'k3'
          }, // static types
          {
            regex: /\b(bigint)\b/g,
            type: 'k5'
          }, // qualifier/modifier
          {
            regex: /\b(unsigned)\b/g,
            type: 'k8'
          }, // common keyword set
          {
            regex: /\b(SELECT|INSERT|UPDATE|DELETE|INTO|FROM|CREATE|TABLE|VIEW|WHERE|TRIGGER|ALTER|ORDER BY|DESC|ASC|AS|BETWEEN|IN|JOIN|LEFT|RIGHT|INNER|OUTER|USING|ON|UNION)\b/gi,
            type: 'k0'
          }, // general keywords (uppercase)
          {
            regex: /\b[A-Z]+\b/g,
            type: 'k0'
          }, // functions
          _language_common_rules.fCalls, // numbers
          _language_common_rules.int, _language_common_rules.floats];
        }
      }]);

      return sql;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var squirrel = /*#__PURE__*/function (_generic) {
      _inherits(squirrel, _generic);

      var _super = _createSuper(squirrel);

      function squirrel() {
        _classCallCheck(this, squirrel);

        return _super.apply(this, arguments);
      }

      _createClass(squirrel, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings - double quoted
          _language_common_rules.dqStrings, // char-numbers - chars handled as numbers
          {
            regex: _language_common_rules.sqStrings.regex,
            type: 'n0'
          }, // properties
          _language_common_rules.prop, // slash style comments
          _language_common_rules.slashComments, // # style comments
          _language_common_rules.poundComments, // multi line comments
          _language_common_rules.blockComments, // brackets () {} [] <>
          _language_common_rules.brackets, // variable type/initializations
          {
            regex: /\b(const|enum|local)\b/g,
            type: 'k2'
          }, // control keywords
          {
            regex: /\b(break|case|catch|continue|else|for|foreach|if|switch|while|try|do)\b/g,
            type: 'k1'
          }, // keywords
          {
            regex: /\b(base|class|clone|constructor|default|extends|false|function|null|resume|return|static|this|throw|true|yield)\b/g,
            type: 'k0'
          }, // operator
          {
            regex: /\b(delete|in|instanceof|typeof)\b/g,
            type: 'k3'
          }, // method calls
          _language_common_rules.mCalls, // function calls
          _language_common_rules.fCalls, // octals
          _language_common_rules.octal, // numbers (hex)
          _language_common_rules.hex, // numbers (floats)
          _language_common_rules.floats, // numbers (int)
          _language_common_rules.int];
        }
      }]);

      return squirrel;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var swift = /*#__PURE__*/function (_generic) {
      _inherits(swift, _generic);

      var _super = _createSuper(swift);

      function swift() {
        _classCallCheck(this, swift);

        return _super.apply(this, arguments);
      }

      _createClass(swift, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings
          _language_common_rules.dqStrings, // boolean valies
          _language_common_rules.boolean, // directives
          {
            regex: /#.*$/gm,
            type: 'k4'
          }, // properties - render before keywords!
          _language_common_rules.prop, // namespace module imports
          {
            regex: /(import )(.*?)$/gm,
            type: ['k0', 'k10']
          }, // null expression
          {
            regex: /\b(nil)\b/gi,
            type: 'e1'
          }, // control keywords
          {
            regex: /\b(break|case|continue|default|do|else|for|if|switch|while|catch|throw|try)\b/g,
            type: 'k1'
          }, // variable/constant initializations
          {
            regex: /\b(var|let|enum|struct)\b/g,
            type: 'k2'
          }, // static types
          {
            regex: /\b(Int|UInt|Float|Double|Bool|String|Character|Optional|Array|Dictionary)\b/g,
            type: 'k5'
          }, // keywords
          {
            regex: /\b(associatedtype|class|deinit|extension|func|init|inout|internal|operator|private|protocol|public|static|subscript|typealias|defer|fallthrough|guard|in|as|repeat|return|where|dynamicType|is|rethrows|super|self|Self|throws|associativity|convenience|dynamic|didSet|final|get|infix|indirect|lazy|left|mutating|none|nonmutating|optional|override|postfix|precedence|prefix|Protocol|required|right|set|Type|unowned|weak|willSet)\b/g,
            type: 'k0'
          }, // method calls
          _language_common_rules.mCalls, // global function calls
          _language_common_rules.fCalls, // slash style doc comments
          {
            regex: /(?:^|[^\\])\/\/\/.*$/gm,
            type: 'c2'
          }, // multi line doc comments
          _language_common_rules.docComments, // slash style comments
          _language_common_rules.slashComments, // multi line comments
          _language_common_rules.blockComments, // binary numbers: 0b10001001
          {
            regex: /[\b\W](-?0b[01_]+)\b/gi,
            type: 'n3'
          }, // hex numbers: 0x21F1A9
          {
            regex: /[\b\W](-?0x[A-F0-9_]+)(?!\.)\b/gi,
            type: 'n2'
          }, // octal numbers: 07172
          {
            regex: /[\b\W](-?0o[0-7_]+)(?!\.)\b/g,
            type: 'n4'
          }, // integers (non word boundary!): -1234
          {
            regex: /[\b\W](-?[\d_]+)(?!\.)\b/g,
            type: 'n1'
          }, // floats
          {
            regex: /(-?(?:[\d_]+\.[\d_]+(?:e[+-]?[\d_]+)?))/gi,
            type: 'n0'
          }, // hex floats
          {
            regex: /(-?0x(?:[A-F0-9_]+\.[A-F0-9_]+(?:p[+-]?[A-F0-9_]+)?))/gi,
            type: 'n2'
          }, // brackets
          _language_common_rules.brackets];
        }
      }]);

      return swift;
    }(generic);

    // ES2015 Superset
    // Author: [Andi Dittrich]
    // --

    var typescript = /*#__PURE__*/function (_javascript) {
      _inherits(typescript, _javascript);

      var _super = _createSuper(typescript);

      function typescript() {
        _classCallCheck(this, typescript);

        return _super.apply(this, arguments);
      }

      _createClass(typescript, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          // run python regex setup
          _get(_getPrototypeOf(typescript.prototype), "setupLanguage", this).call(this); // local rule-set


          var addonRules = [// types
          {
            regex: /\b(boolean|number|string|any|void|undefined|never|symbol)\b/g,
            type: 'k5'
          }, // variable type/initializations
          {
            regex: /\b(type|interface)\b/g,
            type: 'k2'
          }, // qualifier/modifier
          {
            regex: /\b(abstract|implements|readonly)\b/g,
            type: 'k8'
          }, // keywords
          {
            regex: /\b(declare|namespace)\b/g,
            type: 'k0'
          }, // function calls with generics
          {
            regex: /\b([\w]+)\s*</gm,
            type: 'm0'
          }, // generics
          {
            regex: /[<>]/g,
            type: 'g1'
          }]; // merge rules (prepend)

          this.rules = addonRules.concat(this.rules);
        }
      }]);

      return typescript;
    }(javascript);

    // Author: [Andi Dittrich]
    // --

    var vhdl = /*#__PURE__*/function (_generic) {
      _inherits(vhdl, _generic);

      var _super = _createSuper(vhdl);

      function vhdl() {
        _classCallCheck(this, vhdl);

        return _super.apply(this, arguments);
      }

      _createClass(vhdl, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// single line comments
          {
            regex: /((?:^\s*|\s+)--.*$)/gm,
            type: 'c0'
          }, // directives
          {
            regex: /^\s*(?:use|library)\s*(\S+);/gim,
            type: 'k9'
          }, // global function calls
          _language_common_rules.fCalls, // symbols
          {
            regex: /\*\*|\*|\/|\+|-|&|=|\/=|<|<=|>|>=/g,
            type: 'g0'
          }, // vectors (double quotes)
          _language_common_rules.dqStrings, // single bit (single quotes)
          _language_common_rules.sqStrings, // brackets
          _language_common_rules.brackets, // variable type/initializations
          {
            regex: /\b(alias|array|variable|downto|range|to|type|units)\b/g,
            type: 'k2'
          }, // types
          {
            regex: /\b(array|buffer|bus|file)\b/g,
            type: 'k5'
          }, // control keywords
          {
            regex: /\b(if|else|elsif|end|for|while|loop|when|begin|block|case|exit|next|then)\b/g,
            type: 'k1'
          }, // keywords
          {
            regex: /\b(access|after|all|architecture|attribute|assert|body|component|configuration|constant|disconnect|entity|function|generate|generic|group|guarded|impure|in|inertial|inout|is|label|library|linkage|literal|map|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|record|return|select|severity|signal|shared|subtype|transport|unaffected|use|vaiable|with|wait|until)\b/g,
            type: 'k0'
          }, // operator
          {
            regex: /\b(abs|not|mod|rem|sll|srl|sla|sra|rol|ror|and|or|nand|nor|xor|xnor|new)\b/g,
            type: 'k3'
          }, // floats/integer numbers - scalar types
          _language_common_rules.floats];
        }
      }]);

      return vhdl;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var visualbasic = /*#__PURE__*/function (_generic) {
      _inherits(visualbasic, _generic);

      var _super = _createSuper(visualbasic);

      function visualbasic() {
        _classCallCheck(this, visualbasic);

        return _super.apply(this, arguments);
      }

      _createClass(visualbasic, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings
          _language_common_rules.dqStrings, // boolean
          _language_common_rules.boolean, // properties - render before keywords!
          _language_common_rules.prop, // directives
          {
            regex: /(#.*?)(?:'|$)/gim,
            type: 'k4'
          }, // control keywords
          {
            regex: /\b(Case|Catch|Continue|Each|Else|ElseIf|End|EndIf|Do|Finally|For|If|Loop|Next|OrElse|Then|Throw|Try|When|While)\b/g,
            type: 'k1'
          }, // namespace module imports
          {
            regex: /(Imports )(.*?)$/gm,
            type: ['k0', 'k10']
          }, // static types
          {
            regex: /\b(Boolean|Byte|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|CLng|CObj|CSByte|CShort|CSng|CStr|CType|CUInt|CULng|CUShort|Decimal|Double|Integer|Long|ParamArray|SByte|Short|Single|String|UInteger|ULong|UShort)\b/g,
            type: 'k5'
          }, // type initialization
          {
            regex: /\b(Dim|Enum|Let|ReDim)\b/g,
            type: 'k2'
          }, // qualifier/modifier
          {
            regex: /\b(Const|Shared|Static)\b/g,
            type: 'k8'
          }, // keywords
          {
            regex: /\b(AddHandler|AddressOf|Alias|As|ByRef|ByVal|Call|Class|Date|Declare|Default|Delegate|DirectCast|Erase|Error|Event|Exit|Friend|Function|Get|GetType|GetXMLNamespace|Global|GoSub|GoTo|Handles|Implements|In|Inherits|Interface|Lib|Like|Me|Module|MustInherit|MustOverride|MyBase|MyClass|Namespace|Narrowing|Nothing|NotInheritable|NotOverridable|Object|Of|On|Operator|Option|Optional|Out|Overloads|Overridable|Overrides|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|REM|RemoveHandler|Resume|Return|Select|Set|Shadows|Step|Stop|Structure|Sub|SyncLock|To|TryCast|Using|Variant|Wend|Widening|With|WithEvents|WriteOnly)\b/gi,
            type: 'k0'
          }, // operator
          {
            regex: /\b(And|AndAlso|Is|IsNot|Mod|New|Not|Or|TypeOf|Xor)\b/g,
            type: 'k3'
          }, // method calls
          _language_common_rules.mCalls, // global function calls
          _language_common_rules.fCalls, // single line comments
          {
            regex: /'.*$/gm,
            type: 'c0'
          }, // inetgers
          _language_common_rules.int, // floatss
          _language_common_rules.floats, // brackets
          _language_common_rules.brackets];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['vb'];
        }
      }]);

      return visualbasic;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var xml = /*#__PURE__*/function (_generic) {
      _inherits(xml, _generic);

      var _super = _createSuper(xml);

      function xml() {
        _classCallCheck(this, xml);

        return _super.apply(this, arguments);
      }

      _createClass(xml, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          // xml attributes. Stage-2 Analyzing
          function parseXmlAttributes(token$1) {
            // run the MicroTokenizer to identify the name=value match
            return microTokenizer(token$1, /\b([\w:-]+)(\s*=\s*)(['"][^'"]*['"]|[^'" \t]+)/gi, function (match) {
              // attribute name | assignment operator | attribute value (string)
              return [token(match[1], 'x2'), token(match[2], 'k3'), token(match[3], 's0')];
            });
          }

          this.rules = [// doctype
          {
            regex: /<!DOCTYPE[\s\S]+?>/g,
            type: 'k9'
          }, // xml directives
          {
            regex: /<\?xml[\s\S]+\?>/gi,
            type: 'k4'
          }, // multi line comments
          {
            regex: /<!--[\s\S]*?-->/g,
            type: 'c1'
          }, // CDATA
          {
            regex: /(<!\[CDATA\[)([\s\S]*?)(]]>)/gim,
            type: ['c9', 'text', 'c9']
          }, // opening tags + self closing
          {
            regex: /(<)([A-Z:_][A-Z0-9:.-]*)([\s\S]*?)(\/?>)/gi,
            type: ['g1', 'x1', 'text', 'g1'],
            filter: [null, null, parseXmlAttributes, null]
          }, // closing tags
          {
            regex: /(<\/)([A-Z:_][A-Z0-9:.-]*\s*)(>)/gi,
            type: ['g1', 'x1', 'g1']
          }];
        }
      }], [{
        key: "alias",
        // language aliases
        value: function alias() {
          return ['html'];
        }
      }]);

      return xml;
    }(generic);

    // Author: [Andi Dittrich]
    // --

    var yaml = /*#__PURE__*/function (_generic) {
      _inherits(yaml, _generic);

      var _super = _createSuper(yaml);

      function yaml() {
        _classCallCheck(this, yaml);

        return _super.apply(this, arguments);
      }

      _createClass(yaml, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// comments
          _language_common_rules.poundComments, // boolean expression
          _language_common_rules.boolean, // null expression
          _language_common_rules.null, // directives
          {
            regex: /^%[A-Z]+\s+.*$/gm,
            type: 'k4'
          }, // types
          {
            regex: /\b!{1,2}[A-Z]+\b/gi,
            type: 'k5'
          }, // variables/keys
          {
            regex: /\b[a-z][a-z0-9_-]*:/gim,
            type: 'k7'
          }, // brackets
          {
            regex: /\{|}|\(|\)|\[|]/g,
            type: 'g1'
          }, // block data (string)
          {
            regex: /\s+(?:>|\|)[\r|\n]+((?:\s+[^\r\n]+[\r|\n]+)+)/gi,
            type: 's5'
          }, // quoted strings
          _language_common_rules.dqStrings, _language_common_rules.sqStrings, // floats/integer numbers
          _language_common_rules.floats];
        }
      }]);

      return yaml;
    }(generic);

    // Author: [Yunhao Tian]
    // --

    var verilog = /*#__PURE__*/function (_generic) {
      _inherits(verilog, _generic);

      var _super = _createSuper(verilog);

      function verilog() {
        _classCallCheck(this, verilog);

        return _super.apply(this, arguments);
      }

      _createClass(verilog, [{
        key: "setupLanguage",
        value: function setupLanguage() {
          this.rules = [// strings
          _language_common_rules.dqStrings, // directives
          {
            regex: /`\w*\b/g,
            type: 'k4'
          }, {
            regex: /\[( *\d+(?: *\: *\d+) *)\]/g,
            type: 'e3'
          }, {
            regex: /\b(for|generate|if|else|repeat|case|endcase|begin|end|ifnone)\b/g,
            type: 'k1'
          }, {
            regex: /\b(output|input|inout|reg|wire|assign)\b/g,
            type: 'k5'
          }, {
            regex: /\b(module|endmodule|always|function|endfunction)\b/g,
            type: 'k2'
          }, // keywords
          {
            regex: /\b(or|rpmos|tranif1|and|initial|rtran|tri|parameter|rtranif0|tri0|pmos|rtranif1|tri1|buf|endprimitive|integer|posedge|scalared|triand|bufif0|endspecify|join|primitive|small|trior|bufif1|endtable|large|pull0|specify|trireg|endtask|macromodule|pull1|specparam|vectored|casex|event|medium|pullup|strong0|wait|casez|pulldown|strong1|wand|cmos|force|nand|rcmos|supply0|weak0|deassign|forever|negedge|real|supply1|weak1|default|nmos|realtime|table|defparam|nor|task|disable|highz0|not|release|time|wor|edge|highz1|notif0|tran|xnor|notif1|rnmos|tranif0|xor)\b/g,
            type: 'k0'
          }, // slash style comments
          _language_common_rules.slashComments, // multi line comments
          _language_common_rules.blockComments, // numbers
          {
            regex: /-?\d*'s?d[0-9_xz]+\b/gi,
            type: 'n1'
          }, {
            regex: /-?\d*'s?h[0-9a-f_xz]+\b/gi,
            type: 'n2'
          }, {
            regex: /-?\d*'s?b[01_xz]+\b/gi,
            type: 'n3'
          }, {
            regex: /-?\d*'s?o[0-7_xz]+\b/gi,
            type: 'n4'
          }, _language_common_rules.int, _language_common_rules.brackets];
        }
      }]);

      return verilog;
    }(generic);

    // ----------------------------------------------------------------------

    var _languages = /*#__PURE__*/Object.freeze({
        __proto__: null,
        generic: generic,
        abap: abap,
        assembly: assembly,
        avrassembly: avrassembly,
        cpp: cpp,
        csharp: csharp,
        css: css,
        cython: cython,
        cordpro: cordpro,
        diff: diff,
        dockerfile: dockerfile,
        go: go,
        groovy: groovy,
        ini: ini,
        java: java,
        javascript: javascript,
        json: json,
        kotlin: kotlin,
        less: less,
        lua: lua,
        markdown: markdown,
        matlab: matlab,
        nsis: nsis,
        php: php,
        powershell: powershell,
        prolog: prolog,
        python: python,
        qml: qml,
        raw: raw,
        ruby: ruby,
        rust: rust,
        scala: scala,
        scss: scss,
        shell: shell,
        sql: sql,
        squirrel: squirrel,
        swift: swift,
        typescript: typescript,
        vhdl: vhdl,
        visualbasic: visualbasic,
        xml: xml,
        yaml: yaml,
        verilog: verilog
    });

    var _aliasList = {
      'standard': 'generic'
    }; // list of language instances

    var _instances = {}; // flag

    var _aliasListGenerated = false; // helper function to process aliases

    function resolveAlias(lang) {
      // alias list generated ?
      if (!_aliasListGenerated) {
        // set flag
        _aliasListGenerated = true; // process each language support file

        for (var name in _languages) {
          // alias available ?
          if (typeof _languages[name].alias !== 'function') {
            continue;
          } // get available aliases


          var aliases = _languages[name].alias(); // process


          var _iterator = _createForOfIteratorHelper(aliases),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var alias = _step.value;
              // assign alias to language filename
              _aliasList[alias] = name;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      } // resolve


      return _aliasList[lang];
    } // lookup alias


    function getLanguage(lang) {
      // transform to lowercase
      lang = (lang || '').toLowerCase(); // alias used ?

      lang = resolveAlias(lang) || lang; // language available ?

      return _languages[lang] ? lang : null;
    } // create new instance

    function getInstance(name1, name2) {
      // use given language - including generic fallback
      var languageIdentifier = getLanguage(name1) || getLanguage(name2) || 'generic'; // instance already exists ?

      if (!_instances[languageIdentifier]) {
        // create language engine instance
        _instances[languageIdentifier] = new _languages[languageIdentifier]();
      } // return cached instance


      return _instances[languageIdentifier];
    }

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2020 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------

    /* eslint no-undef: 0 */
    var globals = {
      document: document,
      window: window
    }; // wrapper

    function getDocument() {
      return document;
    } // wrapper

    function getWindow() {
      return window;
    }

    // ----------------------------------------------------------------------

    function displayElement(el) {
      var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      el.style.display = visible === true ? 'block' : 'none';
    } // remove element

    function disposeElement(el) {
      el.parentNode.removeChild(el);
    } // get array of matched elements

    function getElements(selector) {
      return selector != null && selector.length > 0 ? getDocument().querySelectorAll(selector) : [];
    } // get first matched element

    function getElement(selector) {
      return selector != null && selector.length > 0 ? getDocument().querySelector(selector) : null;
    } // get data attribute

    function getElementDataAttribute(el, attb) {
      return el.getAttribute('data-' + attb) || null;
    } // get attribute

    function getElementAttribute(el, attb) {
      return el.getAttribute(attb) || null;
    } // add element before the original container

    function insertBefore(origin, element) {
      return origin.parentNode.insertBefore(element, origin);
    }

    function createNode(element, attributes, content) {
      var _document = getDocument(); // create new dom element


      var el = _document.createElement(element); // inner content set ?


      if (content.length > 0) {
        // push nodes to parent element
        for (var i = 0; i < content.length; i++) {
          var node = content[i]; // invalid element/optional

          if (node === null || node === false) {
            continue;
          } // valid element ?


          if (typeof node === 'undefined') {
            el.appendChild(_document.createTextNode('#INVALID_ELEMENT#'));
            continue;
          } // array ?


          if (node.push) {
            for (var j = 0; j < node.length; j++) {
              var node2 = node[j]; // invalid element/optional

              if (node2 === null || node2 === false) {
                continue;
              } // valid element ?


              if (typeof node2 === 'undefined') {
                el.appendChild(_document.createTextNode('#INVALID_ELEMENT#'));
                continue;
              } // standard dom node ?


              if (node2.appendChild) {
                el.appendChild(node2); // text node
              } else {
                el.appendChild(_document.createTextNode(node2));
              }
            } // standard dom node ?

          } else if (node.appendChild) {
            el.appendChild(node); // text node
          } else {
            el.appendChild(_document.createTextNode(node));
          }
        }
      } // utility function to add event listener


      function addEventListener(event, cb) {
        // register listener
        el.addEventListener(event, function (evt) {
          // disable defaults, disable propagation
          evt.preventDefault();
          evt.stopPropagation(); // bind this to event listener

          if (cb) {
            cb.apply(el, [evt, el]);
          }
        });
      } // set attributes
      // iterate over object properties


      for (var attbName in attributes) {
        // object property ?
        if (!Object.prototype.hasOwnProperty.call(attributes, attbName)) {
          continue;
        } // extract value


        var attbValue = attributes[attbName]; // event ?

        if (attbName.substr(0, 2) === 'on') {
          // ignore null events
          if (attbValue === null) {
            continue;
          } // extract event type


          var type = attbName.substr(2).toLowerCase(); // register listener

          addEventListener(type, attbValue); // set attribute
        } else {
          // ignore invalid attributes
          if (typeof attbValue === 'undefined' || attbValue === null) {
            continue;
          } // className set ? transform


          switch (attbName) {
            case 'className':
              el.setAttribute('class', attbValue);
              break;

            case 'htmlFor':
              el.setAttribute('for', attbValue);
              break;

            default:
              el.setAttribute(attbName, attbValue);
          }
        }
      } // extend element


      el.on = addEventListener;
      return el;
    } // create a new dom element with given attributes / text / dom nodes

    function createElement(element, attributes) {
      for (var _len = arguments.length, content = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        content[_key - 2] = arguments[_key];
      }

      // class or plain function ?
      if (typeof element === 'function') {
        // create instance
        var i = _construct(element, [attributes || {}].concat(content)); // render prototype available ?


        if (typeof i.render === 'function') {
          return i.render(); // eslint-disable-next-line no-undef
        } else if (i instanceof HTMLElement) {
          return i;
        } else {
          getDocument().createTextNode('#INVALID_JSX_ELEMENT#');
        } // new dom node based on string

      } else {
        return createNode(element, attributes, content);
      }
    }

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2020 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    function renderComponent(stack) {
      var domTargetElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      // inject into target element ?
      if (domTargetElement !== null) {
        domTargetElement.appendChild(stack);
      }

      return stack;
    }

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2020 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    // add class to element
    function addClass(element, name) {
      if (!element.classList.contains(name)) {
        element.classList.add(name);
      }
    } // remove class from element

    function removeClass(element, name) {
      if (element.classList.contains(name)) {
        element.classList.remove(name);
      }
    } // has class

    function hasClass(element, name) {
      return element.classList.contains(name);
    } // toggle element class

    function toggleClass(element, name) {
      if (element.classList.contains(name)) {
        element.classList.remove(name);
      } else {
        element.classList.add(name);
      }
    }

    // ----------------------------------------------------------------------

    var React = /*#__PURE__*/Object.freeze({
        __proto__: null,
        globals: globals,
        getDocument: getDocument,
        getWindow: getWindow,
        displayElement: displayElement,
        disposeElement: disposeElement,
        getElements: getElements,
        getElement: getElement,
        getElementDataAttribute: getElementDataAttribute,
        getElementAttribute: getElementAttribute,
        insertBefore: insertBefore,
        createNode: createNode,
        createElement: createElement,
        renderComponent: renderComponent,
        addClass: addClass,
        removeClass: removeClass,
        hasClass: hasClass,
        toggleClass: toggleClass
    });

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2018 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    function getSpecialLines(lineNumberString, lineOffsetString) {
      // special lines given ?
      if (typeof lineNumberString !== 'string' || lineNumberString.length === 0) {
        // empty generator
        return function () {
          return false;
        };
      } // line offset available ?


      var rawLineOfsset = parseInt(lineOffsetString);
      var lineOffset = !isNaN(rawLineOfsset) && rawLineOfsset > 1 ? rawLineOfsset - 1 : 0; // list of special lines (lookup table)

      var specialLines = {}; // split attribute string into segments

      var segments = lineNumberString.split(','); // iterate over segments

      segments.forEach(function (item) {
        // pattern xxxx-yyyy
        var parts = item.match(/([0-9]+)-([0-9]+)/); // single line or line-range

        if (parts != null) {
          // 2 items required
          var start = parseInt(parts[1]) - lineOffset;
          var stop = parseInt(parts[2]) - lineOffset; // valid range ? forward only

          if (stop > start) {
            // add lines to storage
            for (var i = start; i <= stop; i++) {
              specialLines['' + i] = true;
            }
          }
        } else {
          // add line to storage
          specialLines['' + (parseInt(item) - lineOffset)] = true;
        }
      }); // line selected ?

      return function isSpecial(line) {
        return specialLines['' + line] || false;
      };
    }

    // ----------------------------------------------------------------------
    function DomBlockRenderer(_ref) {
      var tokens = _ref.tokens,
          options = _ref.options;
      // check if the current line is special (should highlighted)
      var isSpecialLine = getSpecialLines(options.highlight, options.lineoffset); // buffer

      var lines = []; // current line element

      var currentLine = []; // generate multiline structure from tokens

      tokens.forEach(function (token) {
        // split the token into lines
        var multilines = token.text.split('\n'); // token is a simple fragment - no linebreaks

        if (multilines.length === 1) {
          currentLine.push([token.type, token.text]); // line-breaks found
        } else {
          // add the first fragment to the current line
          currentLine.push([token.type, multilines.shift()]); // generate element for each line

          multilines.forEach(function (line) {
            // grab old line into output container
            lines.push(currentLine); // create new line, add special line classes - index starts at 0

            currentLine = []; // create new token-element

            currentLine.push([token.type, line]);
          });
        }
      }); // grab last line into container

      lines.push(currentLine); // list of styles 

      var styles = []; // lineoffset ?

      if (options.lineoffset > 0) {
        // set css counter start
        styles.push("counter-reset: enlighter " + (parseInt(options.lineoffset) - 1));
      }

      return /*#__PURE__*/createElement("div", {
        className: "enlighter",
        style: styles.join(';')
      }, lines.map(function (line, index) {
        return /*#__PURE__*/createElement("div", {
          className: isSpecialLine(index + 1) ? 'enlighter-special' : ''
        }, /*#__PURE__*/createElement("div", null, line.map(function (fragment) {
          return /*#__PURE__*/createElement("span", {
            className: 'enlighter-' + fragment[0]
          }, fragment[1]);
        })));
      }));
    }

    function Container(props) {
      // css classes
      var classes = []; // name set ?

      if (props.name) {
        classes.push('enlighter-' + props.name);
      } // additional classnames set ?


      if (props.className) {
        // string input ?
        if (typeof props.className === 'string') {
          classes.push(props.className); // array input
        } else {
          classes.push.apply(classes, _toConsumableArray(props.className));
        }
      } // use createElement directly to expand the children!


      for (var _len = arguments.length, children = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        children[_key - 1] = arguments[_key];
      }

      return createElement.apply(React, ['div', {
        className: classes.join(' ')
      }].concat(children));
    }

    // ----------------------------------------------------------------------
    function Button(props) {
      // button css classes
      var classes = ['enlighter-btn']; // name set ?

      if (props.name) {
        classes.push('enlighter-btn-' + props.name);
      } // create button


      return /*#__PURE__*/createElement("div", {
        className: classes.join(' '),
        onClick: props.onClick,
        title: props.tooltip
      }, props.text || null);
    }

    // ----------------------------------------------------------------------
    function raw$1(props) {
      // trigger raw code toggle
      function toggleRawCode() {
        props.toggleClass('enlighter-show-rawcode');
      }

      return /*#__PURE__*/createElement(Button, {
        name: "raw",
        tooltip: "Toggle RAW code",
        onClick: toggleRawCode
      });
    }

    // ----------------------------------------------------------------------

    function copy(content) {
      // optimization
      var _document = getDocument();

      var _window = getWindow(); // create dummy node


      var contentContainer = createElement('pre', {
        className: 'enlighter-clipboard'
      }, content); // append dummy element to document

      _document.body.appendChild(contentContainer);

      try {
        // select source element
        var range = _document.createRange();

        range.selectNodeContents(contentContainer); // add range to window

        var selection = _window.getSelection();

        selection.removeAllRanges();
        selection.addRange(range);
      } catch (e) {
        return false;
      } // exec wrapper


      function execCommand() {
        try {
          return _document.execCommand('copy');
        } catch (e) {
          return false;
        }
      } // try to exec "copy"


      var success = execCommand(); // remove range from window

      _window.getSelection().removeAllRanges(); // dispose dummy element


      disposeElement(contentContainer);
      return success;
    }

    // ----------------------------------------------------------------------
    function copy$1(props) {
      // trigger clipboard copy
      function copyToClipboard() {
        // try to copy to clipboard
        copy(props.getRawCode());
      }

      return /*#__PURE__*/createElement(Button, {
        name: "copy",
        tooltip: "Copy to clipboard",
        onClick: copyToClipboard
      });
    }

    // ----------------------------------------------------------------------
    function window$1(props) {
      // optimization
      var _window = getWindow(); // open raw code in new window


      function openCodeWindow() {
        // open new window
        var w = _window.open('', '', 'width=' + _window.screen.width / 2 + ', height=' + _window.screen.height / 2 + ', menubar=no, titlebar=no, toolbar=no, top=100, left=100, scrollbars=yes, status=no'); // escape code


        var code = props.getRawCode().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;'); // insert code

        w.document.body.innerHTML = '<pre>' + code + '</pre>';
        w.document.title = 'Sourcecode | EnlighterJS Syntax Highlighter';
      }

      return /*#__PURE__*/createElement(Button, {
        name: "window",
        tooltip: "Open code in new window",
        onClick: openCodeWindow
      });
    }

    // ----------------------------------------------------------------------

    function openEnlighterLink() {
      getWindow().open('https://enlighterjs.org');
    }

    function website() {
      return /*#__PURE__*/createElement(Button, {
        name: "website",
        tooltip: "EnlighterJS 3 Syntax Highlighter",
        onClick: openEnlighterLink
      });
    }

    // ----------------------------------------------------------------------
    function collapse(props) {
      // trigger raw code toggle
      function toggleCollapse() {
        props.toggleClass('enlighter-collapse-full');
      }

      return /*#__PURE__*/createElement(Button, {
        name: "collapse",
        tooltip: "Expand",
        onClick: toggleCollapse
      });
    }

    // ----------------------------------------------------------------------
     //export {tabs} from './tabs.jsx';

    var Buttons = /*#__PURE__*/Object.freeze({
        __proto__: null,
        raw: raw$1,
        copy: copy$1,
        window: window$1,
        website: website,
        collapse: collapse
    });

    // ----------------------------------------------------------------------

    function extractPlaceholder(bar) {
      // buffer
      var placeholder = [];
      var regex = /{BTN_([A-Z_]+)}/g; // try to find placeholder

      var match;

      while ((match = regex.exec(bar)) != null) {
        placeholder.push(match[1].toLowerCase());
      }

      return placeholder;
    }

    function Toolbar(props) {
      var btn = extractPlaceholder(props.layout).map(function (p) {
        if (Buttons[p]) {
          return createElement(Buttons[p], {
            getRawCode: props.getRawCode,
            toggleClass: props.toggleClass
          });
        } else {
          return null;
        }
      }).filter(function (v) {
        return v !== null;
      }); // generate wrapper

      return /*#__PURE__*/createElement(Container, {
        name: 'toolbar-' + props.name,
        className: "enlighter-toolbar"
      }, btn);
    }

    // ----------------------------------------------------------------------

    function RawCode(props, content) {
      // just some sugar..
      return /*#__PURE__*/createElement("div", {
        className: "enlighter-raw"
      }, content);
    }

    function standard(dataset) {
      var wrapper = null; // extract options/params from first codeblock

      var options = dataset[0].params; // list of css classes to apply on the outer wrapper

      var cssClasses = ['enlighter-default', 'enlighter-v-standard', 'enlighter-t-' + dataset[0].params.theme]; // hover enabled ?

      if (options.linehover === true) {
        cssClasses.push('enlighter-hover');
      } // linenumbers enabled ?


      if (options.linenumbers === true) {
        cssClasses.push('enlighter-linenumbers');
      } // overflow === scroll


      if (options.textOverflow === 'scroll') {
        cssClasses.push('enlighter-overflow-scroll');
      } // limit vertical height ?


      if (options.collapse === true) {
        cssClasses.push('enlighter-collapse');
      } // additional css classes set ?


      if (options.cssClasses.length > 0) {
        cssClasses.push.apply(cssClasses, _toConsumableArray(options.cssClasses));
      } // utility function to toggle raw code


      function toggleClass$1(name) {
        toggleClass(wrapper, name);
      } // utility to fetch raw code


      function getRawCode() {
        return dataset[0].code;
      } // generate wrapper


      wrapper = /*#__PURE__*/createElement(Container, {
        className: cssClasses
      }, /*#__PURE__*/createElement(Toolbar, {
        name: "top",
        layout: options.toolbarTop,
        toggleClass: toggleClass$1,
        getRawCode: getRawCode
      }), /*#__PURE__*/createElement(DomBlockRenderer, {
        tokens: dataset[0].tokens,
        options: dataset[0].params
      }), /*#__PURE__*/createElement(RawCode, null, dataset[0].code), /*#__PURE__*/createElement(Toolbar, {
        name: "bottom",
        layout: options.toolbarBottom,
        toggleClass: toggleClass$1,
        getRawCode: getRawCode
      })); // dbclick event ?

      if (options.rawcodeDbclick) {
        wrapper.on('dblclick', function () {
          toggleClass$1('enlighter-show-rawcode');
        });
      }

      return wrapper;
    }

    // ----------------------------------------------------------------------
    function DomInlineRenderer(_ref) {
      var tokens = _ref.tokens;
      return /*#__PURE__*/createElement("span", {
        className: "enlighter"
      }, tokens.map(function (token) {
        return /*#__PURE__*/createElement("span", {
          className: 'enlighter-' + token.type
        }, token.text);
      }));
    }

    function inline(dataset) {
      // extract options/params from first codeblock
      var options = dataset[0].params; // list of css classes to apply on the outer wrapper

      var cssClasses = ['enlighter-default', 'enlighter-v-inline', 'enlighter-t-' + options.theme]; // additional css classes set ?

      if (options.cssClasses.length > 0) {
        cssClasses.push.apply(cssClasses, _toConsumableArray(options.cssClasses));
      } // render


      return /*#__PURE__*/createElement(Container, {
        className: cssClasses
      }, /*#__PURE__*/createElement(DomInlineRenderer, {
        tokens: dataset[0].tokens,
        options: options
      }));
    }

    // ----------------------------------------------------------------------
    function CodegroupSwitch(props) {
      // index of currently active button
      var activeButton = 0; // buttons

      var buttons = [];

      function click(i) {
        // unlight old button
        removeClass(buttons[activeButton], 'enlighter-active'); // highlight button

        addClass(buttons[i], 'enlighter-active'); // store active button

        activeButton = i; // propagate event

        props.onChange(i);
      } // generate buttons


      buttons = props.dataset.map(function (d, i) {
        return /*#__PURE__*/createElement(Button, {
          onClick: function onClick() {
            return click(i);
          },
          text: d.params.title || d.params.language
        });
      }); // first button is active

      addClass(buttons[0], 'enlighter-active'); // generate wrapper

      return /*#__PURE__*/createElement(Container, {
        name: "codegroup-switch"
      }, buttons);
    }

    function codegroup(dataset) {
      var wrapper = null; // extract options/params from first codeblock

      var options = dataset[0].params; // index of the active tab

      var activeTabIndex = 0; // tabs, buttons

      var tabs = []; //let buttons = [];
      // list of css classes to apply on the outer wrapper

      var cssClasses = ['enlighter-default', 'enlighter-v-codegroup', 'enlighter-t-' + options.theme]; // hover enabled ?

      if (options.linehover === true) {
        cssClasses.push('enlighter-hover');
      } // linenumbers enabled ?


      if (options.linenumbers === true) {
        cssClasses.push('enlighter-linenumbers');
      } // overflow === scroll


      if (options.textOverflow === 'scroll') {
        cssClasses.push('enlighter-overflow-scroll');
      } // limit vertical height ?


      if (options.collapse === true) {
        cssClasses.push('enlighter-collapse');
      } // additional css classes set ?


      if (options.cssClasses.length > 0) {
        cssClasses.push.apply(cssClasses, _toConsumableArray(options.cssClasses));
      } // utility function to toggle raw code


      function toggleClass$1(name) {
        toggleClass(wrapper, name);
      } // utility to fetch raw code


      function getRawCode() {
        return dataset[activeTabIndex].code;
      } // utility function to swap tabs


      function showtab(index) {
        // hide current element
        displayElement(tabs[activeTabIndex], false); // show new element

        displayElement(tabs[index], true); // store index

        activeTabIndex = index;
      } // list of tabs


      tabs = dataset.map(function (d) {
        // create container
        return /*#__PURE__*/createElement("div", {
          style: "display:none"
        }, /*#__PURE__*/createElement(DomBlockRenderer, {
          tokens: d.tokens,
          options: d.params
        }), /*#__PURE__*/createElement(RawCode, null, d.code));
      }); // highlight first button

      showtab(0); // create wrapper

      wrapper = /*#__PURE__*/createElement(Container, {
        className: cssClasses
      }, /*#__PURE__*/createElement(CodegroupSwitch, {
        onChange: function onChange(i) {
          return showtab(i);
        },
        dataset: dataset
      }), /*#__PURE__*/createElement(Container, {
        name: "codegroup-wrapper"
      }, /*#__PURE__*/createElement(Toolbar, {
        name: "top",
        layout: options.toolbarTop,
        toggleClass: toggleClass$1,
        getRawCode: getRawCode
      }), tabs, /*#__PURE__*/createElement(Toolbar, {
        name: "bottom",
        layout: options.toolbarBottom,
        toggleClass: toggleClass$1,
        getRawCode: getRawCode
      }))); // dbclick event ?

      if (options.rawcodeDbclick) {
        wrapper.on('dblclick', function () {
          toggleClass$1('enlighter-show-rawcode');
        });
      }

      return wrapper;
    }

    // ----------------------------------------------------------------------

    var _views = /*#__PURE__*/Object.freeze({
        __proto__: null,
        standard: standard,
        inline: inline,
        codegroup: codegroup
    });

    // ----------------------------------------------------------------------

    function getLayout(name) {
      // transform to lowercase
      name = (name || '').toLowerCase(); // layout available ?

      return _views[name] ? _views[name] : standard;
    } // The Highlighting Engine Backend


    function render(dataset) {
      // get layout
      var layoutEngine = getLayout(dataset[0].params.layout); // entries to token lists

      var codeblocks = dataset.map(function (_ref) {
        var code = _ref.code,
            params = _ref.params;

        // text input required!
        if (typeof code !== 'string') {
          throw new TypeError('EnlighterJS Engine requires string input');
        } // use given language - including generic fallback
        //const languageIdentifier = getLanguage(params.language) || getLanguage(getOption('language')) || 'generic';
        // create language engine instance
        //const languageProcessor = new _languages[languageIdentifier];
        // create language engine instance


        var languageProcessor = getInstance(params.language, getOption('language')); // apply language processor

        return {
          tokens: languageProcessor.analyze(code),
          params: params,
          code: code
        };
      }); // render layout

      return layoutEngine(codeblocks);
    }

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2018 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    function getRawCodeFromElement(element, options) {
      // get the raw content
      var code = element.innerHTML || ''; // remove empty lines at the beginning+end of the codeblock

      code = code.replace(/(^\s*\n|\n\s*$)/gi, ''); // apply input filter
      //code = this.textFilter.filterInput(code);
      // cleanup ampersand ?

      if (options.ampersandCleanup === true) {
        code = code.replace(/&amp;/gim, '&');
      } // replace html escaped chars


      code = code.replace(/&lt;/gim, '<').replace(/&gt;/gim, '>').replace(/&nbsp;/gim, ' '); // get indent option value

      var newIndent = options.indent; // replace tabs with spaces ? re-indent code if specified

      if (newIndent !== false && newIndent > -1) {
        // match all tabs
        code = code.replace(/(\t*)/gim, function (match, p1) {
          // replace n tabs with n*newIndent spaces
          return new Array(newIndent * p1.length + 1).join(' ');
        });
      }

      return code;
    }

    // ----------------------------------------------------------------------

    function map(elements) {
      // set of codegroups identified by group attribute
      var groups = {}; // set of non grouped elements

      var standalone = [];

      for (var i = 0; i < elements.length; i++) {
        // extract group name
        var groupName = getElementDataAttribute(elements[i], 'enlighter-group'); // group set ?


        if (groupName) {
          // group known ?
          if (!groups[groupName]) {
            groups[groupName] = [];
          } // store element


          groups[groupName].push(elements[i]); // force standalone
        } else {
          standalone.push(elements[i]);
        }
      } // return elements as arrays


      return {
        standalone: standalone,
        groups: Object.keys(groups).map(function (k) {
          return groups[k];
        })
      };
    }

    // ----------------------------------------------------------------------

    function mergeOptions() {
      for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {
        options[_key] = arguments[_key];
      }

      // extract final options
      var final = options.pop(); // iterate over options

      for (var i = 0; i < options.length; i++) {
        // extract option
        var o = options[i]; // value exists and not null ?

        if (typeof o !== 'undefined' && o !== null) {
          return o;
        }
      } // fallback


      return final;
    } // utility function to fetch enlighter data attributes and merge local + global options


    function parse(element, elementOptions) {
      // get the options provided via javascript
      function getOption(name) {
        // merge defaults - use utlity function to handle numbers + boolean options (|| operator won't!)
        return mergeOptions(elementOptions[name], _options[name], null);
      } // merge options:
      // 1. element options (data attribute)
      // 2. given options
      // 3. global options/defaults


      function getAttributeOption(name, type) {
        // is attribute set ?
        var v = getElementDataAttribute(element, 'enlighter-' + name); // merge default values with provided element options


        var defaults = getOption(name); // string input

        if (v && v.length > 0) {
          switch (type) {
            // boolean flags
            case 'boolean':
              // lc
              v = v.toLowerCase().trim(); // boolean string expression given ?

              if (v === 'true') {
                return true;
              } else if (v === 'false') {
                return false;
              } else {
                return defaults;
              }

            case 'int':
              // parse integer (fault tolerant)
              v = parseInt(v); // valid number ?

              if (isNaN(v)) {
                return defaults;
              } else {
                return v;
              }

            // string

            default:
              return v;
          } // use defaults

        } else {
          return defaults;
        }
      } // additional css classes


      var additionalCssClasses = getOption('cssClasses') || ''; // retain origin element classes ?

      if (getOption('retainCssClasses') === true) {
        additionalCssClasses += ' ' + (getElementAttribute(element, 'class') || '');
      } // to array


      var cssClassList = additionalCssClasses.replace(/\s+/g, ' ').trim().split(' '); // merge options

      return {
        // @scope SETTINGS,ATTRIBUTE
        language: getAttributeOption('language'),
        theme: getAttributeOption('theme'),
        layout: getAttributeOption('layout'),
        title: getAttributeOption('title'),
        highlight: getAttributeOption('highlight'),
        linenumbers: getAttributeOption('linenumbers', 'boolean'),
        lineoffset: getAttributeOption('lineoffset', 'int'),
        // @scope SETTINGS
        indent: getOption('indent'),
        ampersandCleanup: getOption('ampersandCleanup'),
        linehover: getOption('linehover'),
        rawcodeDbclick: getOption('rawcodeDbclick'),
        textOverflow: getOption('textOverflow'),
        collapse: getOption('collapse'),
        cssClasses: cssClassList,
        toolbarTop: getOption('toolbarTop'),
        toolbarBottom: getOption('toolbarBottom'),
        toolbarHeader: getOption('toolbarHeader')
      };
    }

    // ----------------------------------------------------------------------

    var _highlightedElements = []; // try to find origin element in stack

    function search(originElement) {
      // iterate over highlighted groups
      for (var i = 0; i < _highlightedElements.length; i++) {
        // iterate over origin elements associated to highlighte group
        for (var j = 0; j < _highlightedElements[i].elements.length; j++) {
          // compare elements with first of given elements
          if (_highlightedElements[i].elements[j] === originElement) {
            // return index
            return i;
          }
        }
      } // not found


      return false;
    } // add new highlighting group to stack


    function add(elements, wrapper) {
      _highlightedElements.push({
        elements: elements,
        wrapper: wrapper
      });
    } // remove highloghting group from stack and restore state

    function remove(originElement) {
      // search in highlighted element list
      var index = search(originElement); // element not found ?

      if (index === false) {
        return false;
      } // extract group - remove from stack


      var group = _highlightedElements.splice(index, 1); // remove highlighted codeblock


      disposeElement(group[0].wrapper); // set element origin visible


      group[0].elements.map(function (el) {
        return removeClass(el, 'enlighter-origin');
      });
      return true;
    }

    // ----------------------------------------------------------------------

    var version = '3.2.0'; // enlighter a single element/codegroup

    function enlight(elements) {
      var elementOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      try {
        // single element or group to highlight ?
        if (!Array.isArray(elements)) {
          // to array 
          elements = [elements];
        } // empty dataset ?


        if (elements.length === 0) {
          return false;
        } // remove highlighted codeblock ?


        if (elementOptions === false) {
          // try to remove highlighted codeblock referenced by origin element
          return remove(elements[0]);
        } // already highlighted ?


        if (hasClass(elements[0], 'enlighter-origin')) {
          return false;
        } // prepare elements, extract code


        var dataset = elements.map(function (element) {
          // extract + parse params
          var params = parse(element, elementOptions); // extract code


          var code = getRawCodeFromElement(element, params); // hide the element

          addClass(element, 'enlighter-origin'); // render the 


          return {
            element: element,
            code: code,
            params: params
          };
        }); // render code

        var wrapper = render(dataset); // add element before the original container


        insertBefore(elements[0], wrapper); // store element reference


        add(elements, wrapper); // ok


        return true; // Global Error Handling (FATAL ERRORS)
      } catch (err) {
        /* eslint no-console: 0 */
        console.error('EnlighterJS Internal Error:', err);
        return false;
      }
    } // static entry - highlight elements (block, codegroup, inline) by css selector

    function init() {
      var blockSelector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'pre.ejs';
      var inlineSelector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'code.ejs';
      var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var layout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      // set global options
      setOptions(opt); // fetch all inline and block elements

      var blockElements = getElements(blockSelector);

      var inlineElements = getElements(inlineSelector); // separate codegroups and standalone elements


      var _codegroupMapper$map = map(blockElements),
          standalone = _codegroupMapper$map.standalone,
          groups = _codegroupMapper$map.groups; // enlight all matched block-elements


      for (var i = 0; i < standalone.length; i++) {
        enlight(standalone[i], {
          layout: layout.block || 'standard'
        });
      } // enlight all matched codegroups block-elements


      for (var _i = 0; _i < groups.length; _i++) {
        enlight(groups[_i], {
          layout: layout.codegroup || 'codegroup'
        });
      } // enlight all matched inline-elements


      for (var _i2 = 0; _i2 < inlineElements.length; _i2++) {
        enlight(inlineElements[_i2], {
          layout: layout.inline || 'inline'
        });
      }
    }

    exports.enlight = enlight;
    exports.init = init;
    exports.version = version;

    return exports;

}({}));

// ----------------------------------------------------------------------
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
// --
// Copyright 2016-2018 Andi Dittrich <https://andidittrich.de>
// ----------------------------------------------------------------------

/* eslint no-undef: 0 */
(function(jq){
    // jQuery available ?
    if (typeof jq !== 'function' || !jq.fn){
        return;
    }

    /**
    * Highlights an element/Removes Element highlighting
    *
    * @param {Object, Boolean} [options] EnlighterJS options Object or Boolean value to enable/disable highlighting
    * @returns {Element} The current Element instance.
    */
   jq.fn.enlight = function(options){
        // mixed input check - options available ?
        options = (typeof(options) == "undefined") ? {} : options;

        // convert "true" to empty Object!
        options = (options===true) ? {} : options;
        
        // chaining
        return this.each(function(){
            // highlight the current element
            /* eslint no-invalid-this: 0 */
            EnlighterJS.enlight(this, options);
        });
    }
}(window.jQuery));

